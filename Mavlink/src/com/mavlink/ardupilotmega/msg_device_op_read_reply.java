/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE DEVICE_OP_READ_REPLY PACKING
package com.mavlink.ardupilotmega;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * Read registers reply.
 */
public class msg_device_op_read_reply extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_DEVICE_OP_READ_REPLY = 11001;
    public static final int MAVLINK_MSG_LENGTH = 136;
    private static final long serialVersionUID = MAVLINK_MSG_ID_DEVICE_OP_READ_REPLY;

      
    /**
     * Request ID - copied from request.
     */
    public long request_id;
      
    /**
     * 0 for success, anything else is failure code.
     */
    public short result;
      
    /**
     * Starting register.
     */
    public short regstart;
      
    /**
     * Count of bytes read.
     */
    public short count;
      
    /**
     * Reply data.
     */
    public short[] data = new short[128];
      
    /**
     * Bank number.
     */
    public short bank;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_DEVICE_OP_READ_REPLY;
        
        packet.payload.putUnsignedInt(request_id);
        packet.payload.putUnsignedByte(result);
        packet.payload.putUnsignedByte(regstart);
        packet.payload.putUnsignedByte(count);
        
        for (int i = 0; i < data.length; i++) {
            packet.payload.putUnsignedByte(data[i]);
        }
                    
        
        if (isMavlink2) {
             packet.payload.putUnsignedByte(bank);
            
        }
        return packet;
    }

    /**
     * Decode a device_op_read_reply message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.request_id = payload.getUnsignedInt();
        this.result = payload.getUnsignedByte();
        this.regstart = payload.getUnsignedByte();
        this.count = payload.getUnsignedByte();
         
        for (int i = 0; i < this.data.length; i++) {
            this.data[i] = payload.getUnsignedByte();
        }
                
        
        if (isMavlink2) {
             this.bank = payload.getUnsignedByte();
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_device_op_read_reply() {
        this.msgid = MAVLINK_MSG_ID_DEVICE_OP_READ_REPLY;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_device_op_read_reply( long request_id, short result, short regstart, short count, short[] data, short bank) {
        this.msgid = MAVLINK_MSG_ID_DEVICE_OP_READ_REPLY;

        this.request_id = request_id;
        this.result = result;
        this.regstart = regstart;
        this.count = count;
        this.data = data;
        this.bank = bank;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_device_op_read_reply( long request_id, short result, short regstart, short count, short[] data, short bank, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_DEVICE_OP_READ_REPLY;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.request_id = request_id;
        this.result = result;
        this.regstart = regstart;
        this.count = count;
        this.data = data;
        this.bank = bank;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_device_op_read_reply(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_DEVICE_OP_READ_REPLY;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_device_op_read_reply(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_DEVICE_OP_READ_REPLY;

        readJSONheader(jo);
        
        this.request_id = jo.optLong("request_id",0);
        this.result = (short)jo.optInt("result",0);
        this.regstart = (short)jo.optInt("regstart",0);
        this.count = (short)jo.optInt("count",0);
         
        if (jo.has("data")) {
            JSONArray ja_data = jo.optJSONArray("data");
            if (ja_data == null) {
                this.data[0] = (short)jo.optInt("data", 0);
            } else {
                for (int i = 0; i < Math.min(this.data.length, ja_data.length()); i++) {
                    this.data[i] = (short)ja_data.optInt(i,0);
                }
            }
        }
                    
        
        this.bank = (short)jo.optInt("bank",0);
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    @Override
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("request_id", request_id);
        jo.put("result", result);
        jo.put("regstart", regstart);
        jo.put("count", count);
         
        JSONArray ja_data = new JSONArray();
        for (int i = 0; i < this.data.length; i++) {
            ja_data.put(this.data[i]);
        }
        jo.putOpt("data", ja_data);
                
        
        jo.put("bank", bank);
        
        return jo;
    }

                
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_DEVICE_OP_READ_REPLY - sysid:"+sysid+" compid:"+compid+" request_id:"+request_id+" result:"+result+" regstart:"+regstart+" count:"+count+" data:"+data+" bank:"+bank+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_DEVICE_OP_READ_REPLY";
    }
}
        