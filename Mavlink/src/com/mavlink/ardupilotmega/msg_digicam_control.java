/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE DIGICAM_CONTROL PACKING
package com.mavlink.ardupilotmega;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * Control on-board Camera Control System to take shots.
 */
public class msg_digicam_control extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_DIGICAM_CONTROL = 155;
    public static final int MAVLINK_MSG_LENGTH = 13;
    private static final long serialVersionUID = MAVLINK_MSG_ID_DIGICAM_CONTROL;

      
    /**
     * Correspondent value to given extra_param.
     */
    public float extra_value;
      
    /**
     * System ID.
     */
    public short target_system;
      
    /**
     * Component ID.
     */
    public short target_component;
      
    /**
     * 0: stop, 1: start or keep it up //Session control e.g. show/hide lens.
     */
    public short session;
      
    /**
     * 1 to N //Zoom's absolute position (0 means ignore).
     */
    public short zoom_pos;
      
    /**
     * -100 to 100 //Zooming step value to offset zoom from the current position.
     */
    public byte zoom_step;
      
    /**
     * 0: unlock focus or keep unlocked, 1: lock focus or keep locked, 3: re-lock focus.
     */
    public short focus_lock;
      
    /**
     * 0: ignore, 1: shot or start filming.
     */
    public short shot;
      
    /**
     * Command Identity (incremental loop: 0 to 255)//A command sent multiple times will be executed or pooled just once.
     */
    public short command_id;
      
    /**
     * Extra parameters enumeration (0 means ignore).
     */
    public short extra_param;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_DIGICAM_CONTROL;
        
        packet.payload.putFloat(extra_value);
        packet.payload.putUnsignedByte(target_system);
        packet.payload.putUnsignedByte(target_component);
        packet.payload.putUnsignedByte(session);
        packet.payload.putUnsignedByte(zoom_pos);
        packet.payload.putByte(zoom_step);
        packet.payload.putUnsignedByte(focus_lock);
        packet.payload.putUnsignedByte(shot);
        packet.payload.putUnsignedByte(command_id);
        packet.payload.putUnsignedByte(extra_param);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a digicam_control message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.extra_value = payload.getFloat();
        this.target_system = payload.getUnsignedByte();
        this.target_component = payload.getUnsignedByte();
        this.session = payload.getUnsignedByte();
        this.zoom_pos = payload.getUnsignedByte();
        this.zoom_step = payload.getByte();
        this.focus_lock = payload.getUnsignedByte();
        this.shot = payload.getUnsignedByte();
        this.command_id = payload.getUnsignedByte();
        this.extra_param = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_digicam_control() {
        this.msgid = MAVLINK_MSG_ID_DIGICAM_CONTROL;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_digicam_control( float extra_value, short target_system, short target_component, short session, short zoom_pos, byte zoom_step, short focus_lock, short shot, short command_id, short extra_param) {
        this.msgid = MAVLINK_MSG_ID_DIGICAM_CONTROL;

        this.extra_value = extra_value;
        this.target_system = target_system;
        this.target_component = target_component;
        this.session = session;
        this.zoom_pos = zoom_pos;
        this.zoom_step = zoom_step;
        this.focus_lock = focus_lock;
        this.shot = shot;
        this.command_id = command_id;
        this.extra_param = extra_param;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_digicam_control( float extra_value, short target_system, short target_component, short session, short zoom_pos, byte zoom_step, short focus_lock, short shot, short command_id, short extra_param, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_DIGICAM_CONTROL;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.extra_value = extra_value;
        this.target_system = target_system;
        this.target_component = target_component;
        this.session = session;
        this.zoom_pos = zoom_pos;
        this.zoom_step = zoom_step;
        this.focus_lock = focus_lock;
        this.shot = shot;
        this.command_id = command_id;
        this.extra_param = extra_param;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_digicam_control(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_DIGICAM_CONTROL;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_digicam_control(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_DIGICAM_CONTROL;

        readJSONheader(jo);
        
        this.extra_value = (float)jo.optDouble("extra_value",0);
        this.target_system = (short)jo.optInt("target_system",0);
        this.target_component = (short)jo.optInt("target_component",0);
        this.session = (short)jo.optInt("session",0);
        this.zoom_pos = (short)jo.optInt("zoom_pos",0);
        this.zoom_step = (byte)jo.optInt("zoom_step",0);
        this.focus_lock = (short)jo.optInt("focus_lock",0);
        this.shot = (short)jo.optInt("shot",0);
        this.command_id = (short)jo.optInt("command_id",0);
        this.extra_param = (short)jo.optInt("extra_param",0);
        
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    @Override
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("extra_value", (double)extra_value);
        jo.put("target_system", target_system);
        jo.put("target_component", target_component);
        jo.put("session", session);
        jo.put("zoom_pos", zoom_pos);
        jo.put("zoom_step", zoom_step);
        jo.put("focus_lock", focus_lock);
        jo.put("shot", shot);
        jo.put("command_id", command_id);
        jo.put("extra_param", extra_param);
        
        
        return jo;
    }

                        
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_DIGICAM_CONTROL - sysid:"+sysid+" compid:"+compid+" extra_value:"+extra_value+" target_system:"+target_system+" target_component:"+target_component+" session:"+session+" zoom_pos:"+zoom_pos+" zoom_step:"+zoom_step+" focus_lock:"+focus_lock+" shot:"+shot+" command_id:"+command_id+" extra_param:"+extra_param+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_DIGICAM_CONTROL";
    }
}
        