/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE DEVICE_OP_READ PACKING
package com.mavlink.ardupilotmega;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * Read registers for a device.
 */
public class msg_device_op_read extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_DEVICE_OP_READ = 11000;
    public static final int MAVLINK_MSG_LENGTH = 52;
    private static final long serialVersionUID = MAVLINK_MSG_ID_DEVICE_OP_READ;

      
    /**
     * Request ID - copied to reply.
     */
    public long request_id;
      
    /**
     * System ID.
     */
    public short target_system;
      
    /**
     * Component ID.
     */
    public short target_component;
      
    /**
     * The bus type.
     */
    public short bustype;
      
    /**
     * Bus number.
     */
    public short bus;
      
    /**
     * Bus address.
     */
    public short address;
      
    /**
     * Name of device on bus (for SPI).
     */
    public byte[] busname = new byte[40];
      
    /**
     * First register to read.
     */
    public short regstart;
      
    /**
     * Count of registers to read.
     */
    public short count;
      
    /**
     * Bank number.
     */
    public short bank;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_DEVICE_OP_READ;
        
        packet.payload.putUnsignedInt(request_id);
        packet.payload.putUnsignedByte(target_system);
        packet.payload.putUnsignedByte(target_component);
        packet.payload.putUnsignedByte(bustype);
        packet.payload.putUnsignedByte(bus);
        packet.payload.putUnsignedByte(address);
        
        for (int i = 0; i < busname.length; i++) {
            packet.payload.putByte(busname[i]);
        }
                    
        packet.payload.putUnsignedByte(regstart);
        packet.payload.putUnsignedByte(count);
        
        if (isMavlink2) {
             packet.payload.putUnsignedByte(bank);
            
        }
        return packet;
    }

    /**
     * Decode a device_op_read message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.request_id = payload.getUnsignedInt();
        this.target_system = payload.getUnsignedByte();
        this.target_component = payload.getUnsignedByte();
        this.bustype = payload.getUnsignedByte();
        this.bus = payload.getUnsignedByte();
        this.address = payload.getUnsignedByte();
         
        for (int i = 0; i < this.busname.length; i++) {
            this.busname[i] = payload.getByte();
        }
                
        this.regstart = payload.getUnsignedByte();
        this.count = payload.getUnsignedByte();
        
        if (isMavlink2) {
             this.bank = payload.getUnsignedByte();
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_device_op_read() {
        this.msgid = MAVLINK_MSG_ID_DEVICE_OP_READ;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_device_op_read( long request_id, short target_system, short target_component, short bustype, short bus, short address, byte[] busname, short regstart, short count, short bank) {
        this.msgid = MAVLINK_MSG_ID_DEVICE_OP_READ;

        this.request_id = request_id;
        this.target_system = target_system;
        this.target_component = target_component;
        this.bustype = bustype;
        this.bus = bus;
        this.address = address;
        this.busname = busname;
        this.regstart = regstart;
        this.count = count;
        this.bank = bank;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_device_op_read( long request_id, short target_system, short target_component, short bustype, short bus, short address, byte[] busname, short regstart, short count, short bank, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_DEVICE_OP_READ;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.request_id = request_id;
        this.target_system = target_system;
        this.target_component = target_component;
        this.bustype = bustype;
        this.bus = bus;
        this.address = address;
        this.busname = busname;
        this.regstart = regstart;
        this.count = count;
        this.bank = bank;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_device_op_read(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_DEVICE_OP_READ;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_device_op_read(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_DEVICE_OP_READ;

        readJSONheader(jo);
        
        this.request_id = jo.optLong("request_id",0);
        this.target_system = (short)jo.optInt("target_system",0);
        this.target_component = (short)jo.optInt("target_component",0);
        this.bustype = (short)jo.optInt("bustype",0);
        this.bus = (short)jo.optInt("bus",0);
        this.address = (short)jo.optInt("address",0);
         
        if (jo.has("busname")) {
            JSONArray ja_busname = jo.optJSONArray("busname");
            if (ja_busname == null) {
                final String js_string_busname = jo.optString("busname");
                final byte[] b_busname = js_string_busname.getBytes();
                System.arraycopy(b_busname, 0, this.busname, 0, Math.min(this.busname.length, b_busname.length));
            } else {
                for (int i = 0; i < Math.min(this.busname.length, ja_busname.length()); i++) {
                    this.busname[i] = (byte)ja_busname.optInt(i,0);
                }
            }
        }
                    
        this.regstart = (short)jo.optInt("regstart",0);
        this.count = (short)jo.optInt("count",0);
        
        this.bank = (short)jo.optInt("bank",0);
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    @Override
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("request_id", request_id);
        jo.put("target_system", target_system);
        jo.put("target_component", target_component);
        jo.put("bustype", bustype);
        jo.put("bus", bus);
        jo.put("address", address);
         
        JSONArray ja_busname = new JSONArray();
        for (int i = 0; i < this.busname.length; i++) {
            ja_busname.put(this.busname[i]);
        }
        jo.putOpt("busname", ja_busname);
                
        jo.put("regstart", regstart);
        jo.put("count", count);
        
        jo.put("bank", bank);
        
        return jo;
    }

                 
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setBusname(String str) {
        int len = Math.min(str.length(), 40);
        for (int i=0; i<len; i++) {
            busname[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<40; i++) {            // padding for the rest of the buffer
            busname[i] = 0;
        }
    }

    /**
    * Gets the message, formated as a string
    */
    public String getBusname() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 40; i++) {
            if (busname[i] != 0)
                buf.append((char) busname[i]);
            else
                break;
        }
        return buf.toString();

    }
                               
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_DEVICE_OP_READ - sysid:"+sysid+" compid:"+compid+" request_id:"+request_id+" target_system:"+target_system+" target_component:"+target_component+" bustype:"+bustype+" bus:"+bus+" address:"+address+" busname:"+busname+" regstart:"+regstart+" count:"+count+" bank:"+bank+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_DEVICE_OP_READ";
    }
}
        