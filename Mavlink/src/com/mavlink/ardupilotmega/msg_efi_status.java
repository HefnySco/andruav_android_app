/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE EFI_STATUS PACKING
package com.mavlink.ardupilotmega;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * EFI status output
 */
public class msg_efi_status extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_EFI_STATUS = 225;
    public static final int MAVLINK_MSG_LENGTH = 65;
    private static final long serialVersionUID = MAVLINK_MSG_ID_EFI_STATUS;

      
    /**
     * ECU index
     */
    public float ecu_index;
      
    /**
     * RPM
     */
    public float rpm;
      
    /**
     * Fuel consumed
     */
    public float fuel_consumed;
      
    /**
     * Fuel flow rate
     */
    public float fuel_flow;
      
    /**
     * Engine load
     */
    public float engine_load;
      
    /**
     * Throttle position
     */
    public float throttle_position;
      
    /**
     * Spark dwell time
     */
    public float spark_dwell_time;
      
    /**
     * Barometric pressure
     */
    public float barometric_pressure;
      
    /**
     * Intake manifold pressure(
     */
    public float intake_manifold_pressure;
      
    /**
     * Intake manifold temperature
     */
    public float intake_manifold_temperature;
      
    /**
     * Cylinder head temperature
     */
    public float cylinder_head_temperature;
      
    /**
     * Ignition timing (Crank angle degrees)
     */
    public float ignition_timing;
      
    /**
     * Injection time
     */
    public float injection_time;
      
    /**
     * Exhaust gas temperature
     */
    public float exhaust_gas_temperature;
      
    /**
     * Output throttle
     */
    public float throttle_out;
      
    /**
     * Pressure/temperature compensation
     */
    public float pt_compensation;
      
    /**
     * EFI health status
     */
    public short health;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_EFI_STATUS;
        
        packet.payload.putFloat(ecu_index);
        packet.payload.putFloat(rpm);
        packet.payload.putFloat(fuel_consumed);
        packet.payload.putFloat(fuel_flow);
        packet.payload.putFloat(engine_load);
        packet.payload.putFloat(throttle_position);
        packet.payload.putFloat(spark_dwell_time);
        packet.payload.putFloat(barometric_pressure);
        packet.payload.putFloat(intake_manifold_pressure);
        packet.payload.putFloat(intake_manifold_temperature);
        packet.payload.putFloat(cylinder_head_temperature);
        packet.payload.putFloat(ignition_timing);
        packet.payload.putFloat(injection_time);
        packet.payload.putFloat(exhaust_gas_temperature);
        packet.payload.putFloat(throttle_out);
        packet.payload.putFloat(pt_compensation);
        packet.payload.putUnsignedByte(health);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a efi_status message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.ecu_index = payload.getFloat();
        this.rpm = payload.getFloat();
        this.fuel_consumed = payload.getFloat();
        this.fuel_flow = payload.getFloat();
        this.engine_load = payload.getFloat();
        this.throttle_position = payload.getFloat();
        this.spark_dwell_time = payload.getFloat();
        this.barometric_pressure = payload.getFloat();
        this.intake_manifold_pressure = payload.getFloat();
        this.intake_manifold_temperature = payload.getFloat();
        this.cylinder_head_temperature = payload.getFloat();
        this.ignition_timing = payload.getFloat();
        this.injection_time = payload.getFloat();
        this.exhaust_gas_temperature = payload.getFloat();
        this.throttle_out = payload.getFloat();
        this.pt_compensation = payload.getFloat();
        this.health = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_efi_status() {
        this.msgid = MAVLINK_MSG_ID_EFI_STATUS;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_efi_status( float ecu_index, float rpm, float fuel_consumed, float fuel_flow, float engine_load, float throttle_position, float spark_dwell_time, float barometric_pressure, float intake_manifold_pressure, float intake_manifold_temperature, float cylinder_head_temperature, float ignition_timing, float injection_time, float exhaust_gas_temperature, float throttle_out, float pt_compensation, short health) {
        this.msgid = MAVLINK_MSG_ID_EFI_STATUS;

        this.ecu_index = ecu_index;
        this.rpm = rpm;
        this.fuel_consumed = fuel_consumed;
        this.fuel_flow = fuel_flow;
        this.engine_load = engine_load;
        this.throttle_position = throttle_position;
        this.spark_dwell_time = spark_dwell_time;
        this.barometric_pressure = barometric_pressure;
        this.intake_manifold_pressure = intake_manifold_pressure;
        this.intake_manifold_temperature = intake_manifold_temperature;
        this.cylinder_head_temperature = cylinder_head_temperature;
        this.ignition_timing = ignition_timing;
        this.injection_time = injection_time;
        this.exhaust_gas_temperature = exhaust_gas_temperature;
        this.throttle_out = throttle_out;
        this.pt_compensation = pt_compensation;
        this.health = health;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_efi_status( float ecu_index, float rpm, float fuel_consumed, float fuel_flow, float engine_load, float throttle_position, float spark_dwell_time, float barometric_pressure, float intake_manifold_pressure, float intake_manifold_temperature, float cylinder_head_temperature, float ignition_timing, float injection_time, float exhaust_gas_temperature, float throttle_out, float pt_compensation, short health, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_EFI_STATUS;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.ecu_index = ecu_index;
        this.rpm = rpm;
        this.fuel_consumed = fuel_consumed;
        this.fuel_flow = fuel_flow;
        this.engine_load = engine_load;
        this.throttle_position = throttle_position;
        this.spark_dwell_time = spark_dwell_time;
        this.barometric_pressure = barometric_pressure;
        this.intake_manifold_pressure = intake_manifold_pressure;
        this.intake_manifold_temperature = intake_manifold_temperature;
        this.cylinder_head_temperature = cylinder_head_temperature;
        this.ignition_timing = ignition_timing;
        this.injection_time = injection_time;
        this.exhaust_gas_temperature = exhaust_gas_temperature;
        this.throttle_out = throttle_out;
        this.pt_compensation = pt_compensation;
        this.health = health;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_efi_status(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_EFI_STATUS;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_efi_status(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_EFI_STATUS;

        readJSONheader(jo);
        
        this.ecu_index = (float)jo.optDouble("ecu_index",0);
        this.rpm = (float)jo.optDouble("rpm",0);
        this.fuel_consumed = (float)jo.optDouble("fuel_consumed",0);
        this.fuel_flow = (float)jo.optDouble("fuel_flow",0);
        this.engine_load = (float)jo.optDouble("engine_load",0);
        this.throttle_position = (float)jo.optDouble("throttle_position",0);
        this.spark_dwell_time = (float)jo.optDouble("spark_dwell_time",0);
        this.barometric_pressure = (float)jo.optDouble("barometric_pressure",0);
        this.intake_manifold_pressure = (float)jo.optDouble("intake_manifold_pressure",0);
        this.intake_manifold_temperature = (float)jo.optDouble("intake_manifold_temperature",0);
        this.cylinder_head_temperature = (float)jo.optDouble("cylinder_head_temperature",0);
        this.ignition_timing = (float)jo.optDouble("ignition_timing",0);
        this.injection_time = (float)jo.optDouble("injection_time",0);
        this.exhaust_gas_temperature = (float)jo.optDouble("exhaust_gas_temperature",0);
        this.throttle_out = (float)jo.optDouble("throttle_out",0);
        this.pt_compensation = (float)jo.optDouble("pt_compensation",0);
        this.health = (short)jo.optInt("health",0);
        
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    @Override
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("ecu_index", (double)ecu_index);
        jo.put("rpm", (double)rpm);
        jo.put("fuel_consumed", (double)fuel_consumed);
        jo.put("fuel_flow", (double)fuel_flow);
        jo.put("engine_load", (double)engine_load);
        jo.put("throttle_position", (double)throttle_position);
        jo.put("spark_dwell_time", (double)spark_dwell_time);
        jo.put("barometric_pressure", (double)barometric_pressure);
        jo.put("intake_manifold_pressure", (double)intake_manifold_pressure);
        jo.put("intake_manifold_temperature", (double)intake_manifold_temperature);
        jo.put("cylinder_head_temperature", (double)cylinder_head_temperature);
        jo.put("ignition_timing", (double)ignition_timing);
        jo.put("injection_time", (double)injection_time);
        jo.put("exhaust_gas_temperature", (double)exhaust_gas_temperature);
        jo.put("throttle_out", (double)throttle_out);
        jo.put("pt_compensation", (double)pt_compensation);
        jo.put("health", health);
        
        
        return jo;
    }

                                      
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_EFI_STATUS - sysid:"+sysid+" compid:"+compid+" ecu_index:"+ecu_index+" rpm:"+rpm+" fuel_consumed:"+fuel_consumed+" fuel_flow:"+fuel_flow+" engine_load:"+engine_load+" throttle_position:"+throttle_position+" spark_dwell_time:"+spark_dwell_time+" barometric_pressure:"+barometric_pressure+" intake_manifold_pressure:"+intake_manifold_pressure+" intake_manifold_temperature:"+intake_manifold_temperature+" cylinder_head_temperature:"+cylinder_head_temperature+" ignition_timing:"+ignition_timing+" injection_time:"+injection_time+" exhaust_gas_temperature:"+exhaust_gas_temperature+" throttle_out:"+throttle_out+" pt_compensation:"+pt_compensation+" health:"+health+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_EFI_STATUS";
    }
}
        