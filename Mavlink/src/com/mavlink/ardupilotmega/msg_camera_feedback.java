/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE CAMERA_FEEDBACK PACKING
package com.mavlink.ardupilotmega;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * Camera Capture Feedback.
 */
public class msg_camera_feedback extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_CAMERA_FEEDBACK = 180;
    public static final int MAVLINK_MSG_LENGTH = 47;
    private static final long serialVersionUID = MAVLINK_MSG_ID_CAMERA_FEEDBACK;

      
    /**
     * Image timestamp (since UNIX epoch), as passed in by CAMERA_STATUS message (or autopilot if no CCB).
     */
    public long time_usec;
      
    /**
     * Latitude.
     */
    public int lat;
      
    /**
     * Longitude.
     */
    public int lng;
      
    /**
     * Altitude (MSL).
     */
    public float alt_msl;
      
    /**
     * Altitude (Relative to HOME location).
     */
    public float alt_rel;
      
    /**
     * Camera Roll angle (earth frame, +-180).
     */
    public float roll;
      
    /**
     * Camera Pitch angle (earth frame, +-180).
     */
    public float pitch;
      
    /**
     * Camera Yaw (earth frame, 0-360, true).
     */
    public float yaw;
      
    /**
     * Focal Length.
     */
    public float foc_len;
      
    /**
     * Image index.
     */
    public int img_idx;
      
    /**
     * System ID.
     */
    public short target_system;
      
    /**
     * Camera ID.
     */
    public short cam_idx;
      
    /**
     * Feedback flags.
     */
    public short flags;
      
    /**
     * Completed image captures.
     */
    public int completed_captures;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_CAMERA_FEEDBACK;
        
        packet.payload.putUnsignedLong(time_usec);
        packet.payload.putInt(lat);
        packet.payload.putInt(lng);
        packet.payload.putFloat(alt_msl);
        packet.payload.putFloat(alt_rel);
        packet.payload.putFloat(roll);
        packet.payload.putFloat(pitch);
        packet.payload.putFloat(yaw);
        packet.payload.putFloat(foc_len);
        packet.payload.putUnsignedShort(img_idx);
        packet.payload.putUnsignedByte(target_system);
        packet.payload.putUnsignedByte(cam_idx);
        packet.payload.putUnsignedByte(flags);
        
        if (isMavlink2) {
             packet.payload.putUnsignedShort(completed_captures);
            
        }
        return packet;
    }

    /**
     * Decode a camera_feedback message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.time_usec = payload.getUnsignedLong();
        this.lat = payload.getInt();
        this.lng = payload.getInt();
        this.alt_msl = payload.getFloat();
        this.alt_rel = payload.getFloat();
        this.roll = payload.getFloat();
        this.pitch = payload.getFloat();
        this.yaw = payload.getFloat();
        this.foc_len = payload.getFloat();
        this.img_idx = payload.getUnsignedShort();
        this.target_system = payload.getUnsignedByte();
        this.cam_idx = payload.getUnsignedByte();
        this.flags = payload.getUnsignedByte();
        
        if (isMavlink2) {
             this.completed_captures = payload.getUnsignedShort();
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_camera_feedback() {
        this.msgid = MAVLINK_MSG_ID_CAMERA_FEEDBACK;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_camera_feedback( long time_usec, int lat, int lng, float alt_msl, float alt_rel, float roll, float pitch, float yaw, float foc_len, int img_idx, short target_system, short cam_idx, short flags, int completed_captures) {
        this.msgid = MAVLINK_MSG_ID_CAMERA_FEEDBACK;

        this.time_usec = time_usec;
        this.lat = lat;
        this.lng = lng;
        this.alt_msl = alt_msl;
        this.alt_rel = alt_rel;
        this.roll = roll;
        this.pitch = pitch;
        this.yaw = yaw;
        this.foc_len = foc_len;
        this.img_idx = img_idx;
        this.target_system = target_system;
        this.cam_idx = cam_idx;
        this.flags = flags;
        this.completed_captures = completed_captures;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_camera_feedback( long time_usec, int lat, int lng, float alt_msl, float alt_rel, float roll, float pitch, float yaw, float foc_len, int img_idx, short target_system, short cam_idx, short flags, int completed_captures, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_CAMERA_FEEDBACK;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.time_usec = time_usec;
        this.lat = lat;
        this.lng = lng;
        this.alt_msl = alt_msl;
        this.alt_rel = alt_rel;
        this.roll = roll;
        this.pitch = pitch;
        this.yaw = yaw;
        this.foc_len = foc_len;
        this.img_idx = img_idx;
        this.target_system = target_system;
        this.cam_idx = cam_idx;
        this.flags = flags;
        this.completed_captures = completed_captures;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_camera_feedback(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_CAMERA_FEEDBACK;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_camera_feedback(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_CAMERA_FEEDBACK;

        readJSONheader(jo);
        
         
        if (jo.has("time_usec")) {
            final JSONArray ja_time_usec = jo.optJSONArray("time_usec");
            if (ja_time_usec == null) {
                this.time_usec = jo.optLong("time_usec", 0);
            } else if (ja_time_usec.length() > 0) {
                this.time_usec = ja_time_usec.optLong(0, 0);
            }
        }
                    
        this.lat = jo.optInt("lat",0);
        this.lng = jo.optInt("lng",0);
        this.alt_msl = (float)jo.optDouble("alt_msl",0);
        this.alt_rel = (float)jo.optDouble("alt_rel",0);
        this.roll = (float)jo.optDouble("roll",0);
        this.pitch = (float)jo.optDouble("pitch",0);
        this.yaw = (float)jo.optDouble("yaw",0);
        this.foc_len = (float)jo.optDouble("foc_len",0);
        this.img_idx = jo.optInt("img_idx",0);
        this.target_system = (short)jo.optInt("target_system",0);
        this.cam_idx = (short)jo.optInt("cam_idx",0);
        this.flags = (short)jo.optInt("flags",0);
        
        this.completed_captures = jo.optInt("completed_captures",0);
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    @Override
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("time_usec", time_usec);
        jo.put("lat", lat);
        jo.put("lng", lng);
        jo.put("alt_msl", (double)alt_msl);
        jo.put("alt_rel", (double)alt_rel);
        jo.put("roll", (double)roll);
        jo.put("pitch", (double)pitch);
        jo.put("yaw", (double)yaw);
        jo.put("foc_len", (double)foc_len);
        jo.put("img_idx", img_idx);
        jo.put("target_system", target_system);
        jo.put("cam_idx", cam_idx);
        jo.put("flags", flags);
        
        jo.put("completed_captures", completed_captures);
        
        return jo;
    }

                                
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_CAMERA_FEEDBACK - sysid:"+sysid+" compid:"+compid+" time_usec:"+time_usec+" lat:"+lat+" lng:"+lng+" alt_msl:"+alt_msl+" alt_rel:"+alt_rel+" roll:"+roll+" pitch:"+pitch+" yaw:"+yaw+" foc_len:"+foc_len+" img_idx:"+img_idx+" target_system:"+target_system+" cam_idx:"+cam_idx+" flags:"+flags+" completed_captures:"+completed_captures+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_CAMERA_FEEDBACK";
    }
}
        