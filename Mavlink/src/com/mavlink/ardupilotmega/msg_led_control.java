/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE LED_CONTROL PACKING
package com.mavlink.ardupilotmega;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * Control vehicle LEDs.
 */
public class msg_led_control extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_LED_CONTROL = 186;
    public static final int MAVLINK_MSG_LENGTH = 29;
    private static final long serialVersionUID = MAVLINK_MSG_ID_LED_CONTROL;

      
    /**
     * System ID.
     */
    public short target_system;
      
    /**
     * Component ID.
     */
    public short target_component;
      
    /**
     * Instance (LED instance to control or 255 for all LEDs).
     */
    public short instance;
      
    /**
     * Pattern (see LED_PATTERN_ENUM).
     */
    public short pattern;
      
    /**
     * Custom Byte Length.
     */
    public short custom_len;
      
    /**
     * Custom Bytes.
     */
    public short[] custom_bytes = new short[24];
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_LED_CONTROL;
        
        packet.payload.putUnsignedByte(target_system);
        packet.payload.putUnsignedByte(target_component);
        packet.payload.putUnsignedByte(instance);
        packet.payload.putUnsignedByte(pattern);
        packet.payload.putUnsignedByte(custom_len);
        
        for (int i = 0; i < custom_bytes.length; i++) {
            packet.payload.putUnsignedByte(custom_bytes[i]);
        }
                    
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a led_control message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.target_system = payload.getUnsignedByte();
        this.target_component = payload.getUnsignedByte();
        this.instance = payload.getUnsignedByte();
        this.pattern = payload.getUnsignedByte();
        this.custom_len = payload.getUnsignedByte();
         
        for (int i = 0; i < this.custom_bytes.length; i++) {
            this.custom_bytes[i] = payload.getUnsignedByte();
        }
                
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_led_control() {
        this.msgid = MAVLINK_MSG_ID_LED_CONTROL;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_led_control( short target_system, short target_component, short instance, short pattern, short custom_len, short[] custom_bytes) {
        this.msgid = MAVLINK_MSG_ID_LED_CONTROL;

        this.target_system = target_system;
        this.target_component = target_component;
        this.instance = instance;
        this.pattern = pattern;
        this.custom_len = custom_len;
        this.custom_bytes = custom_bytes;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_led_control( short target_system, short target_component, short instance, short pattern, short custom_len, short[] custom_bytes, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_LED_CONTROL;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.target_system = target_system;
        this.target_component = target_component;
        this.instance = instance;
        this.pattern = pattern;
        this.custom_len = custom_len;
        this.custom_bytes = custom_bytes;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_led_control(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_LED_CONTROL;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_led_control(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_LED_CONTROL;

        readJSONheader(jo);
        
        this.target_system = (short)jo.optInt("target_system",0);
        this.target_component = (short)jo.optInt("target_component",0);
        this.instance = (short)jo.optInt("instance",0);
        this.pattern = (short)jo.optInt("pattern",0);
        this.custom_len = (short)jo.optInt("custom_len",0);
         
        if (jo.has("custom_bytes")) {
            JSONArray ja_custom_bytes = jo.optJSONArray("custom_bytes");
            if (ja_custom_bytes == null) {
                this.custom_bytes[0] = (short)jo.optInt("custom_bytes", 0);
            } else {
                for (int i = 0; i < Math.min(this.custom_bytes.length, ja_custom_bytes.length()); i++) {
                    this.custom_bytes[i] = (short)ja_custom_bytes.optInt(i,0);
                }
            }
        }
                    
        
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    @Override
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("target_system", target_system);
        jo.put("target_component", target_component);
        jo.put("instance", instance);
        jo.put("pattern", pattern);
        jo.put("custom_len", custom_len);
         
        JSONArray ja_custom_bytes = new JSONArray();
        for (int i = 0; i < this.custom_bytes.length; i++) {
            ja_custom_bytes.put(this.custom_bytes[i]);
        }
        jo.putOpt("custom_bytes", ja_custom_bytes);
                
        
        
        return jo;
    }

                
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_LED_CONTROL - sysid:"+sysid+" compid:"+compid+" target_system:"+target_system+" target_component:"+target_component+" instance:"+instance+" pattern:"+pattern+" custom_len:"+custom_len+" custom_bytes:"+custom_bytes+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_LED_CONTROL";
    }
}
        