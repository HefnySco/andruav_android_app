/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE OPTICAL_FLOW PACKING
package com.mavlink.common;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * Optical flow from a flow sensor (e.g. optical mouse sensor)
 */
public class msg_optical_flow extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_OPTICAL_FLOW = 100;
    public static final int MAVLINK_MSG_LENGTH = 34;
    private static final long serialVersionUID = MAVLINK_MSG_ID_OPTICAL_FLOW;

      
    /**
     * Timestamp (UNIX Epoch time or time since system boot). The receiving end can infer timestamp format (since 1.1.1970 or since system boot) by checking for the magnitude of the number.
     */
    public long time_usec;
      
    /**
     * Flow in x-sensor direction, angular-speed compensated
     */
    public float flow_comp_m_x;
      
    /**
     * Flow in y-sensor direction, angular-speed compensated
     */
    public float flow_comp_m_y;
      
    /**
     * Ground distance. Positive value: distance known. Negative value: Unknown distance
     */
    public float ground_distance;
      
    /**
     * Flow in x-sensor direction
     */
    public short flow_x;
      
    /**
     * Flow in y-sensor direction
     */
    public short flow_y;
      
    /**
     * Sensor ID
     */
    public short sensor_id;
      
    /**
     * Optical flow quality / confidence. 0: bad, 255: maximum quality
     */
    public short quality;
      
    /**
     * Flow rate about X axis
     */
    public float flow_rate_x;
      
    /**
     * Flow rate about Y axis
     */
    public float flow_rate_y;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_OPTICAL_FLOW;
        
        packet.payload.putUnsignedLong(time_usec);
        packet.payload.putFloat(flow_comp_m_x);
        packet.payload.putFloat(flow_comp_m_y);
        packet.payload.putFloat(ground_distance);
        packet.payload.putShort(flow_x);
        packet.payload.putShort(flow_y);
        packet.payload.putUnsignedByte(sensor_id);
        packet.payload.putUnsignedByte(quality);
        
        if (isMavlink2) {
             packet.payload.putFloat(flow_rate_x);
             packet.payload.putFloat(flow_rate_y);
            
        }
        return packet;
    }

    /**
     * Decode a optical_flow message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.time_usec = payload.getUnsignedLong();
        this.flow_comp_m_x = payload.getFloat();
        this.flow_comp_m_y = payload.getFloat();
        this.ground_distance = payload.getFloat();
        this.flow_x = payload.getShort();
        this.flow_y = payload.getShort();
        this.sensor_id = payload.getUnsignedByte();
        this.quality = payload.getUnsignedByte();
        
        if (isMavlink2) {
             this.flow_rate_x = payload.getFloat();
             this.flow_rate_y = payload.getFloat();
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_optical_flow() {
        this.msgid = MAVLINK_MSG_ID_OPTICAL_FLOW;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_optical_flow( long time_usec, float flow_comp_m_x, float flow_comp_m_y, float ground_distance, short flow_x, short flow_y, short sensor_id, short quality, float flow_rate_x, float flow_rate_y) {
        this.msgid = MAVLINK_MSG_ID_OPTICAL_FLOW;

        this.time_usec = time_usec;
        this.flow_comp_m_x = flow_comp_m_x;
        this.flow_comp_m_y = flow_comp_m_y;
        this.ground_distance = ground_distance;
        this.flow_x = flow_x;
        this.flow_y = flow_y;
        this.sensor_id = sensor_id;
        this.quality = quality;
        this.flow_rate_x = flow_rate_x;
        this.flow_rate_y = flow_rate_y;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_optical_flow( long time_usec, float flow_comp_m_x, float flow_comp_m_y, float ground_distance, short flow_x, short flow_y, short sensor_id, short quality, float flow_rate_x, float flow_rate_y, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_OPTICAL_FLOW;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.time_usec = time_usec;
        this.flow_comp_m_x = flow_comp_m_x;
        this.flow_comp_m_y = flow_comp_m_y;
        this.ground_distance = ground_distance;
        this.flow_x = flow_x;
        this.flow_y = flow_y;
        this.sensor_id = sensor_id;
        this.quality = quality;
        this.flow_rate_x = flow_rate_x;
        this.flow_rate_y = flow_rate_y;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_optical_flow(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_OPTICAL_FLOW;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_optical_flow(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_OPTICAL_FLOW;

        readJSONheader(jo);
        
         
        if (jo.has("time_usec")) {
            final JSONArray ja_time_usec = jo.optJSONArray("time_usec");
            if (ja_time_usec == null) {
                this.time_usec = jo.optLong("time_usec", 0);
            } else if (ja_time_usec.length() > 0) {
                this.time_usec = ja_time_usec.optLong(0, 0);
            }
        }
                    
        this.flow_comp_m_x = (float)jo.optDouble("flow_comp_m_x",0);
        this.flow_comp_m_y = (float)jo.optDouble("flow_comp_m_y",0);
        this.ground_distance = (float)jo.optDouble("ground_distance",0);
        this.flow_x = (short)jo.optInt("flow_x",0);
        this.flow_y = (short)jo.optInt("flow_y",0);
        this.sensor_id = (short)jo.optInt("sensor_id",0);
        this.quality = (short)jo.optInt("quality",0);
        
        this.flow_rate_x = (float)jo.optDouble("flow_rate_x",0);
        this.flow_rate_y = (float)jo.optDouble("flow_rate_y",0);
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    @Override
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("time_usec", time_usec);
        jo.put("flow_comp_m_x", (double)flow_comp_m_x);
        jo.put("flow_comp_m_y", (double)flow_comp_m_y);
        jo.put("ground_distance", (double)ground_distance);
        jo.put("flow_x", flow_x);
        jo.put("flow_y", flow_y);
        jo.put("sensor_id", sensor_id);
        jo.put("quality", quality);
        
        jo.put("flow_rate_x", (double)flow_rate_x);
        jo.put("flow_rate_y", (double)flow_rate_y);
        
        return jo;
    }

                        
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_OPTICAL_FLOW - sysid:"+sysid+" compid:"+compid+" time_usec:"+time_usec+" flow_comp_m_x:"+flow_comp_m_x+" flow_comp_m_y:"+flow_comp_m_y+" ground_distance:"+ground_distance+" flow_x:"+flow_x+" flow_y:"+flow_y+" sensor_id:"+sensor_id+" quality:"+quality+" flow_rate_x:"+flow_rate_x+" flow_rate_y:"+flow_rate_y+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_OPTICAL_FLOW";
    }
}
        