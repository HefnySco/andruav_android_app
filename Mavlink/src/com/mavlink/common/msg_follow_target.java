/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE FOLLOW_TARGET PACKING
package com.mavlink.common;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * Current motion information from a designated system
 */
public class msg_follow_target extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_FOLLOW_TARGET = 144;
    public static final int MAVLINK_MSG_LENGTH = 93;
    private static final long serialVersionUID = MAVLINK_MSG_ID_FOLLOW_TARGET;

      
    /**
     * Timestamp (time since system boot).
     */
    public long timestamp;
      
    /**
     * button states or switches of a tracker device
     */
    public long custom_state;
      
    /**
     * Latitude (WGS84)
     */
    public int lat;
      
    /**
     * Longitude (WGS84)
     */
    public int lon;
      
    /**
     * Altitude (MSL)
     */
    public float alt;
      
    /**
     * target velocity (0,0,0) for unknown
     */
    public float[] vel = new float[3];
      
    /**
     * linear target acceleration (0,0,0) for unknown
     */
    public float[] acc = new float[3];
      
    /**
     * (1 0 0 0 for unknown)
     */
    public float[] attitude_q = new float[4];
      
    /**
     * (0 0 0 for unknown)
     */
    public float[] rates = new float[3];
      
    /**
     * eph epv
     */
    public float[] position_cov = new float[3];
      
    /**
     * bit positions for tracker reporting capabilities (POS = 0, VEL = 1, ACCEL = 2, ATT + RATES = 3)
     */
    public short est_capabilities;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_FOLLOW_TARGET;
        
        packet.payload.putUnsignedLong(timestamp);
        packet.payload.putUnsignedLong(custom_state);
        packet.payload.putInt(lat);
        packet.payload.putInt(lon);
        packet.payload.putFloat(alt);
        
        for (int i = 0; i < vel.length; i++) {
            packet.payload.putFloat(vel[i]);
        }
                    
        
        for (int i = 0; i < acc.length; i++) {
            packet.payload.putFloat(acc[i]);
        }
                    
        
        for (int i = 0; i < attitude_q.length; i++) {
            packet.payload.putFloat(attitude_q[i]);
        }
                    
        
        for (int i = 0; i < rates.length; i++) {
            packet.payload.putFloat(rates[i]);
        }
                    
        
        for (int i = 0; i < position_cov.length; i++) {
            packet.payload.putFloat(position_cov[i]);
        }
                    
        packet.payload.putUnsignedByte(est_capabilities);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a follow_target message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.timestamp = payload.getUnsignedLong();
        this.custom_state = payload.getUnsignedLong();
        this.lat = payload.getInt();
        this.lon = payload.getInt();
        this.alt = payload.getFloat();
         
        for (int i = 0; i < this.vel.length; i++) {
            this.vel[i] = payload.getFloat();
        }
                
         
        for (int i = 0; i < this.acc.length; i++) {
            this.acc[i] = payload.getFloat();
        }
                
         
        for (int i = 0; i < this.attitude_q.length; i++) {
            this.attitude_q[i] = payload.getFloat();
        }
                
         
        for (int i = 0; i < this.rates.length; i++) {
            this.rates[i] = payload.getFloat();
        }
                
         
        for (int i = 0; i < this.position_cov.length; i++) {
            this.position_cov[i] = payload.getFloat();
        }
                
        this.est_capabilities = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_follow_target() {
        this.msgid = MAVLINK_MSG_ID_FOLLOW_TARGET;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_follow_target( long timestamp, long custom_state, int lat, int lon, float alt, float[] vel, float[] acc, float[] attitude_q, float[] rates, float[] position_cov, short est_capabilities) {
        this.msgid = MAVLINK_MSG_ID_FOLLOW_TARGET;

        this.timestamp = timestamp;
        this.custom_state = custom_state;
        this.lat = lat;
        this.lon = lon;
        this.alt = alt;
        this.vel = vel;
        this.acc = acc;
        this.attitude_q = attitude_q;
        this.rates = rates;
        this.position_cov = position_cov;
        this.est_capabilities = est_capabilities;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_follow_target( long timestamp, long custom_state, int lat, int lon, float alt, float[] vel, float[] acc, float[] attitude_q, float[] rates, float[] position_cov, short est_capabilities, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_FOLLOW_TARGET;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.timestamp = timestamp;
        this.custom_state = custom_state;
        this.lat = lat;
        this.lon = lon;
        this.alt = alt;
        this.vel = vel;
        this.acc = acc;
        this.attitude_q = attitude_q;
        this.rates = rates;
        this.position_cov = position_cov;
        this.est_capabilities = est_capabilities;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_follow_target(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_FOLLOW_TARGET;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_follow_target(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_FOLLOW_TARGET;

        readJSONheader(jo);
        
         
        if (jo.has("timestamp")) {
            final JSONArray ja_timestamp = jo.optJSONArray("timestamp");
            if (ja_timestamp == null) {
                this.timestamp = jo.optLong("timestamp", 0);
            } else if (ja_timestamp.length() > 0) {
                this.timestamp = ja_timestamp.optLong(0, 0);
            }
        }
                    
         
        if (jo.has("custom_state")) {
            final JSONArray ja_custom_state = jo.optJSONArray("custom_state");
            if (ja_custom_state == null) {
                this.custom_state = jo.optLong("custom_state", 0);
            } else if (ja_custom_state.length() > 0) {
                this.custom_state = ja_custom_state.optLong(0, 0);
            }
        }
                    
        this.lat = jo.optInt("lat",0);
        this.lon = jo.optInt("lon",0);
        this.alt = (float)jo.optDouble("alt",0);
         
        if (jo.has("vel")) {
            JSONArray ja_vel = jo.optJSONArray("vel");
            if (ja_vel == null) {
                this.vel[0] = (float)jo.optDouble("vel", 0);
            } else {
                for (int i = 0; i < Math.min(this.vel.length, ja_vel.length()); i++) {
                    this.vel[i] = (float)ja_vel.optDouble(i,0);
                }
            }
        }
                    
         
        if (jo.has("acc")) {
            JSONArray ja_acc = jo.optJSONArray("acc");
            if (ja_acc == null) {
                this.acc[0] = (float)jo.optDouble("acc", 0);
            } else {
                for (int i = 0; i < Math.min(this.acc.length, ja_acc.length()); i++) {
                    this.acc[i] = (float)ja_acc.optDouble(i,0);
                }
            }
        }
                    
         
        if (jo.has("attitude_q")) {
            JSONArray ja_attitude_q = jo.optJSONArray("attitude_q");
            if (ja_attitude_q == null) {
                this.attitude_q[0] = (float)jo.optDouble("attitude_q", 0);
            } else {
                for (int i = 0; i < Math.min(this.attitude_q.length, ja_attitude_q.length()); i++) {
                    this.attitude_q[i] = (float)ja_attitude_q.optDouble(i,0);
                }
            }
        }
                    
         
        if (jo.has("rates")) {
            JSONArray ja_rates = jo.optJSONArray("rates");
            if (ja_rates == null) {
                this.rates[0] = (float)jo.optDouble("rates", 0);
            } else {
                for (int i = 0; i < Math.min(this.rates.length, ja_rates.length()); i++) {
                    this.rates[i] = (float)ja_rates.optDouble(i,0);
                }
            }
        }
                    
         
        if (jo.has("position_cov")) {
            JSONArray ja_position_cov = jo.optJSONArray("position_cov");
            if (ja_position_cov == null) {
                this.position_cov[0] = (float)jo.optDouble("position_cov", 0);
            } else {
                for (int i = 0; i < Math.min(this.position_cov.length, ja_position_cov.length()); i++) {
                    this.position_cov[i] = (float)ja_position_cov.optDouble(i,0);
                }
            }
        }
                    
        this.est_capabilities = (short)jo.optInt("est_capabilities",0);
        
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    @Override
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("timestamp", timestamp);
        jo.put("custom_state", custom_state);
        jo.put("lat", lat);
        jo.put("lon", lon);
        jo.put("alt", (double)alt);
         
        JSONArray ja_vel = new JSONArray();
        for (int i = 0; i < this.vel.length; i++) {
            ja_vel.put(this.vel[i]);
        }
        jo.putOpt("vel", ja_vel);
                
         
        JSONArray ja_acc = new JSONArray();
        for (int i = 0; i < this.acc.length; i++) {
            ja_acc.put(this.acc[i]);
        }
        jo.putOpt("acc", ja_acc);
                
         
        JSONArray ja_attitude_q = new JSONArray();
        for (int i = 0; i < this.attitude_q.length; i++) {
            ja_attitude_q.put(this.attitude_q[i]);
        }
        jo.putOpt("attitude_q", ja_attitude_q);
                
         
        JSONArray ja_rates = new JSONArray();
        for (int i = 0; i < this.rates.length; i++) {
            ja_rates.put(this.rates[i]);
        }
        jo.putOpt("rates", ja_rates);
                
         
        JSONArray ja_position_cov = new JSONArray();
        for (int i = 0; i < this.position_cov.length; i++) {
            ja_position_cov.put(this.position_cov[i]);
        }
        jo.putOpt("position_cov", ja_position_cov);
                
        jo.put("est_capabilities", est_capabilities);
        
        
        return jo;
    }

                          
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_FOLLOW_TARGET - sysid:"+sysid+" compid:"+compid+" timestamp:"+timestamp+" custom_state:"+custom_state+" lat:"+lat+" lon:"+lon+" alt:"+alt+" vel:"+vel+" acc:"+acc+" attitude_q:"+attitude_q+" rates:"+rates+" position_cov:"+position_cov+" est_capabilities:"+est_capabilities+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_FOLLOW_TARGET";
    }
}
        