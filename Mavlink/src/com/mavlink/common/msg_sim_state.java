/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE SIM_STATE PACKING
package com.mavlink.common;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * Status of simulation environment, if used
 */
public class msg_sim_state extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_SIM_STATE = 108;
    public static final int MAVLINK_MSG_LENGTH = 84;
    private static final long serialVersionUID = MAVLINK_MSG_ID_SIM_STATE;

      
    /**
     * True attitude quaternion component 1, w (1 in null-rotation)
     */
    public float q1;
      
    /**
     * True attitude quaternion component 2, x (0 in null-rotation)
     */
    public float q2;
      
    /**
     * True attitude quaternion component 3, y (0 in null-rotation)
     */
    public float q3;
      
    /**
     * True attitude quaternion component 4, z (0 in null-rotation)
     */
    public float q4;
      
    /**
     * Attitude roll expressed as Euler angles, not recommended except for human-readable outputs
     */
    public float roll;
      
    /**
     * Attitude pitch expressed as Euler angles, not recommended except for human-readable outputs
     */
    public float pitch;
      
    /**
     * Attitude yaw expressed as Euler angles, not recommended except for human-readable outputs
     */
    public float yaw;
      
    /**
     * X acceleration
     */
    public float xacc;
      
    /**
     * Y acceleration
     */
    public float yacc;
      
    /**
     * Z acceleration
     */
    public float zacc;
      
    /**
     * Angular speed around X axis
     */
    public float xgyro;
      
    /**
     * Angular speed around Y axis
     */
    public float ygyro;
      
    /**
     * Angular speed around Z axis
     */
    public float zgyro;
      
    /**
     * Latitude
     */
    public float lat;
      
    /**
     * Longitude
     */
    public float lon;
      
    /**
     * Altitude
     */
    public float alt;
      
    /**
     * Horizontal position standard deviation
     */
    public float std_dev_horz;
      
    /**
     * Vertical position standard deviation
     */
    public float std_dev_vert;
      
    /**
     * True velocity in north direction in earth-fixed NED frame
     */
    public float vn;
      
    /**
     * True velocity in east direction in earth-fixed NED frame
     */
    public float ve;
      
    /**
     * True velocity in down direction in earth-fixed NED frame
     */
    public float vd;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_SIM_STATE;
        
        packet.payload.putFloat(q1);
        packet.payload.putFloat(q2);
        packet.payload.putFloat(q3);
        packet.payload.putFloat(q4);
        packet.payload.putFloat(roll);
        packet.payload.putFloat(pitch);
        packet.payload.putFloat(yaw);
        packet.payload.putFloat(xacc);
        packet.payload.putFloat(yacc);
        packet.payload.putFloat(zacc);
        packet.payload.putFloat(xgyro);
        packet.payload.putFloat(ygyro);
        packet.payload.putFloat(zgyro);
        packet.payload.putFloat(lat);
        packet.payload.putFloat(lon);
        packet.payload.putFloat(alt);
        packet.payload.putFloat(std_dev_horz);
        packet.payload.putFloat(std_dev_vert);
        packet.payload.putFloat(vn);
        packet.payload.putFloat(ve);
        packet.payload.putFloat(vd);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a sim_state message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.q1 = payload.getFloat();
        this.q2 = payload.getFloat();
        this.q3 = payload.getFloat();
        this.q4 = payload.getFloat();
        this.roll = payload.getFloat();
        this.pitch = payload.getFloat();
        this.yaw = payload.getFloat();
        this.xacc = payload.getFloat();
        this.yacc = payload.getFloat();
        this.zacc = payload.getFloat();
        this.xgyro = payload.getFloat();
        this.ygyro = payload.getFloat();
        this.zgyro = payload.getFloat();
        this.lat = payload.getFloat();
        this.lon = payload.getFloat();
        this.alt = payload.getFloat();
        this.std_dev_horz = payload.getFloat();
        this.std_dev_vert = payload.getFloat();
        this.vn = payload.getFloat();
        this.ve = payload.getFloat();
        this.vd = payload.getFloat();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_sim_state() {
        this.msgid = MAVLINK_MSG_ID_SIM_STATE;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_sim_state( float q1, float q2, float q3, float q4, float roll, float pitch, float yaw, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float lat, float lon, float alt, float std_dev_horz, float std_dev_vert, float vn, float ve, float vd) {
        this.msgid = MAVLINK_MSG_ID_SIM_STATE;

        this.q1 = q1;
        this.q2 = q2;
        this.q3 = q3;
        this.q4 = q4;
        this.roll = roll;
        this.pitch = pitch;
        this.yaw = yaw;
        this.xacc = xacc;
        this.yacc = yacc;
        this.zacc = zacc;
        this.xgyro = xgyro;
        this.ygyro = ygyro;
        this.zgyro = zgyro;
        this.lat = lat;
        this.lon = lon;
        this.alt = alt;
        this.std_dev_horz = std_dev_horz;
        this.std_dev_vert = std_dev_vert;
        this.vn = vn;
        this.ve = ve;
        this.vd = vd;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_sim_state( float q1, float q2, float q3, float q4, float roll, float pitch, float yaw, float xacc, float yacc, float zacc, float xgyro, float ygyro, float zgyro, float lat, float lon, float alt, float std_dev_horz, float std_dev_vert, float vn, float ve, float vd, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_SIM_STATE;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.q1 = q1;
        this.q2 = q2;
        this.q3 = q3;
        this.q4 = q4;
        this.roll = roll;
        this.pitch = pitch;
        this.yaw = yaw;
        this.xacc = xacc;
        this.yacc = yacc;
        this.zacc = zacc;
        this.xgyro = xgyro;
        this.ygyro = ygyro;
        this.zgyro = zgyro;
        this.lat = lat;
        this.lon = lon;
        this.alt = alt;
        this.std_dev_horz = std_dev_horz;
        this.std_dev_vert = std_dev_vert;
        this.vn = vn;
        this.ve = ve;
        this.vd = vd;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_sim_state(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_SIM_STATE;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_sim_state(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_SIM_STATE;

        readJSONheader(jo);
        
        this.q1 = (float)jo.optDouble("q1",0);
        this.q2 = (float)jo.optDouble("q2",0);
        this.q3 = (float)jo.optDouble("q3",0);
        this.q4 = (float)jo.optDouble("q4",0);
        this.roll = (float)jo.optDouble("roll",0);
        this.pitch = (float)jo.optDouble("pitch",0);
        this.yaw = (float)jo.optDouble("yaw",0);
        this.xacc = (float)jo.optDouble("xacc",0);
        this.yacc = (float)jo.optDouble("yacc",0);
        this.zacc = (float)jo.optDouble("zacc",0);
        this.xgyro = (float)jo.optDouble("xgyro",0);
        this.ygyro = (float)jo.optDouble("ygyro",0);
        this.zgyro = (float)jo.optDouble("zgyro",0);
        this.lat = (float)jo.optDouble("lat",0);
        this.lon = (float)jo.optDouble("lon",0);
        this.alt = (float)jo.optDouble("alt",0);
        this.std_dev_horz = (float)jo.optDouble("std_dev_horz",0);
        this.std_dev_vert = (float)jo.optDouble("std_dev_vert",0);
        this.vn = (float)jo.optDouble("vn",0);
        this.ve = (float)jo.optDouble("ve",0);
        this.vd = (float)jo.optDouble("vd",0);
        
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    @Override
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("q1", (double)q1);
        jo.put("q2", (double)q2);
        jo.put("q3", (double)q3);
        jo.put("q4", (double)q4);
        jo.put("roll", (double)roll);
        jo.put("pitch", (double)pitch);
        jo.put("yaw", (double)yaw);
        jo.put("xacc", (double)xacc);
        jo.put("yacc", (double)yacc);
        jo.put("zacc", (double)zacc);
        jo.put("xgyro", (double)xgyro);
        jo.put("ygyro", (double)ygyro);
        jo.put("zgyro", (double)zgyro);
        jo.put("lat", (double)lat);
        jo.put("lon", (double)lon);
        jo.put("alt", (double)alt);
        jo.put("std_dev_horz", (double)std_dev_horz);
        jo.put("std_dev_vert", (double)std_dev_vert);
        jo.put("vn", (double)vn);
        jo.put("ve", (double)ve);
        jo.put("vd", (double)vd);
        
        
        return jo;
    }

                                              
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_SIM_STATE - sysid:"+sysid+" compid:"+compid+" q1:"+q1+" q2:"+q2+" q3:"+q3+" q4:"+q4+" roll:"+roll+" pitch:"+pitch+" yaw:"+yaw+" xacc:"+xacc+" yacc:"+yacc+" zacc:"+zacc+" xgyro:"+xgyro+" ygyro:"+ygyro+" zgyro:"+zgyro+" lat:"+lat+" lon:"+lon+" alt:"+alt+" std_dev_horz:"+std_dev_horz+" std_dev_vert:"+std_dev_vert+" vn:"+vn+" ve:"+ve+" vd:"+vd+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_SIM_STATE";
    }
}
        