/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE CHANGE_OPERATOR_CONTROL_ACK PACKING
package com.mavlink.common;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * Accept / deny control of this MAV
 */
public class msg_change_operator_control_ack extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK = 6;
    public static final int MAVLINK_MSG_LENGTH = 3;
    private static final long serialVersionUID = MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK;

      
    /**
     * ID of the GCS this message 
     */
    public short gcs_system_id;
      
    /**
     * 0: request control of this MAV, 1: Release control of this MAV
     */
    public short control_request;
      
    /**
     * 0: ACK, 1: NACK: Wrong passkey, 2: NACK: Unsupported passkey encryption method, 3: NACK: Already under control
     */
    public short ack;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK;
        
        packet.payload.putUnsignedByte(gcs_system_id);
        packet.payload.putUnsignedByte(control_request);
        packet.payload.putUnsignedByte(ack);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a change_operator_control_ack message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.gcs_system_id = payload.getUnsignedByte();
        this.control_request = payload.getUnsignedByte();
        this.ack = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_change_operator_control_ack() {
        this.msgid = MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_change_operator_control_ack( short gcs_system_id, short control_request, short ack) {
        this.msgid = MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK;

        this.gcs_system_id = gcs_system_id;
        this.control_request = control_request;
        this.ack = ack;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_change_operator_control_ack( short gcs_system_id, short control_request, short ack, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.gcs_system_id = gcs_system_id;
        this.control_request = control_request;
        this.ack = ack;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_change_operator_control_ack(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_change_operator_control_ack(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK;

        readJSONheader(jo);
        
        this.gcs_system_id = (short)jo.optInt("gcs_system_id",0);
        this.control_request = (short)jo.optInt("control_request",0);
        this.ack = (short)jo.optInt("ack",0);
        
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    @Override
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("gcs_system_id", gcs_system_id);
        jo.put("control_request", control_request);
        jo.put("ack", ack);
        
        
        return jo;
    }

          
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK - sysid:"+sysid+" compid:"+compid+" gcs_system_id:"+gcs_system_id+" control_request:"+control_request+" ack:"+ack+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_CHANGE_OPERATOR_CONTROL_ACK";
    }
}
        