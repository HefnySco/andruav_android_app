/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE CAMERA_INFORMATION PACKING
package com.mavlink.common;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * Information about a camera
 */
public class msg_camera_information extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_CAMERA_INFORMATION = 259;
    public static final int MAVLINK_MSG_LENGTH = 235;
    private static final long serialVersionUID = MAVLINK_MSG_ID_CAMERA_INFORMATION;

      
    /**
     * Timestamp (time since system boot).
     */
    public long time_boot_ms;
      
    /**
     * Version of the camera firmware (v << 24 & 0xff = Dev, v << 16 & 0xff = Patch, v << 8 & 0xff = Minor, v & 0xff = Major)
     */
    public long firmware_version;
      
    /**
     * Focal length
     */
    public float focal_length;
      
    /**
     * Image sensor size horizontal
     */
    public float sensor_size_h;
      
    /**
     * Image sensor size vertical
     */
    public float sensor_size_v;
      
    /**
     * Bitmap of camera capability flags.
     */
    public long flags;
      
    /**
     * Horizontal image resolution
     */
    public int resolution_h;
      
    /**
     * Vertical image resolution
     */
    public int resolution_v;
      
    /**
     * Camera definition version (iteration)
     */
    public int cam_definition_version;
      
    /**
     * Name of the camera vendor
     */
    public short[] vendor_name = new short[32];
      
    /**
     * Name of the camera model
     */
    public short[] model_name = new short[32];
      
    /**
     * Reserved for a lens ID
     */
    public short lens_id;
      
    /**
     * Camera definition URI (if any, otherwise only basic functions will be available). HTTP- (http://) and MAVLink FTP- (mavlinkftp://) formatted URIs are allowed (and both must be supported by any GCS that implements the Camera Protocol).
     */
    public byte[] cam_definition_uri = new byte[140];
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_CAMERA_INFORMATION;
        
        packet.payload.putUnsignedInt(time_boot_ms);
        packet.payload.putUnsignedInt(firmware_version);
        packet.payload.putFloat(focal_length);
        packet.payload.putFloat(sensor_size_h);
        packet.payload.putFloat(sensor_size_v);
        packet.payload.putUnsignedInt(flags);
        packet.payload.putUnsignedShort(resolution_h);
        packet.payload.putUnsignedShort(resolution_v);
        packet.payload.putUnsignedShort(cam_definition_version);
        
        for (int i = 0; i < vendor_name.length; i++) {
            packet.payload.putUnsignedByte(vendor_name[i]);
        }
                    
        
        for (int i = 0; i < model_name.length; i++) {
            packet.payload.putUnsignedByte(model_name[i]);
        }
                    
        packet.payload.putUnsignedByte(lens_id);
        
        for (int i = 0; i < cam_definition_uri.length; i++) {
            packet.payload.putByte(cam_definition_uri[i]);
        }
                    
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a camera_information message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.time_boot_ms = payload.getUnsignedInt();
        this.firmware_version = payload.getUnsignedInt();
        this.focal_length = payload.getFloat();
        this.sensor_size_h = payload.getFloat();
        this.sensor_size_v = payload.getFloat();
        this.flags = payload.getUnsignedInt();
        this.resolution_h = payload.getUnsignedShort();
        this.resolution_v = payload.getUnsignedShort();
        this.cam_definition_version = payload.getUnsignedShort();
         
        for (int i = 0; i < this.vendor_name.length; i++) {
            this.vendor_name[i] = payload.getUnsignedByte();
        }
                
         
        for (int i = 0; i < this.model_name.length; i++) {
            this.model_name[i] = payload.getUnsignedByte();
        }
                
        this.lens_id = payload.getUnsignedByte();
         
        for (int i = 0; i < this.cam_definition_uri.length; i++) {
            this.cam_definition_uri[i] = payload.getByte();
        }
                
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_camera_information() {
        this.msgid = MAVLINK_MSG_ID_CAMERA_INFORMATION;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_camera_information( long time_boot_ms, long firmware_version, float focal_length, float sensor_size_h, float sensor_size_v, long flags, int resolution_h, int resolution_v, int cam_definition_version, short[] vendor_name, short[] model_name, short lens_id, byte[] cam_definition_uri) {
        this.msgid = MAVLINK_MSG_ID_CAMERA_INFORMATION;

        this.time_boot_ms = time_boot_ms;
        this.firmware_version = firmware_version;
        this.focal_length = focal_length;
        this.sensor_size_h = sensor_size_h;
        this.sensor_size_v = sensor_size_v;
        this.flags = flags;
        this.resolution_h = resolution_h;
        this.resolution_v = resolution_v;
        this.cam_definition_version = cam_definition_version;
        this.vendor_name = vendor_name;
        this.model_name = model_name;
        this.lens_id = lens_id;
        this.cam_definition_uri = cam_definition_uri;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_camera_information( long time_boot_ms, long firmware_version, float focal_length, float sensor_size_h, float sensor_size_v, long flags, int resolution_h, int resolution_v, int cam_definition_version, short[] vendor_name, short[] model_name, short lens_id, byte[] cam_definition_uri, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_CAMERA_INFORMATION;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.time_boot_ms = time_boot_ms;
        this.firmware_version = firmware_version;
        this.focal_length = focal_length;
        this.sensor_size_h = sensor_size_h;
        this.sensor_size_v = sensor_size_v;
        this.flags = flags;
        this.resolution_h = resolution_h;
        this.resolution_v = resolution_v;
        this.cam_definition_version = cam_definition_version;
        this.vendor_name = vendor_name;
        this.model_name = model_name;
        this.lens_id = lens_id;
        this.cam_definition_uri = cam_definition_uri;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_camera_information(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_CAMERA_INFORMATION;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_camera_information(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_CAMERA_INFORMATION;

        readJSONheader(jo);
        
        this.time_boot_ms = jo.optLong("time_boot_ms",0);
        this.firmware_version = jo.optLong("firmware_version",0);
        this.focal_length = (float)jo.optDouble("focal_length",0);
        this.sensor_size_h = (float)jo.optDouble("sensor_size_h",0);
        this.sensor_size_v = (float)jo.optDouble("sensor_size_v",0);
        this.flags = jo.optLong("flags",0);
        this.resolution_h = jo.optInt("resolution_h",0);
        this.resolution_v = jo.optInt("resolution_v",0);
        this.cam_definition_version = jo.optInt("cam_definition_version",0);
         
        if (jo.has("vendor_name")) {
            JSONArray ja_vendor_name = jo.optJSONArray("vendor_name");
            if (ja_vendor_name == null) {
                this.vendor_name[0] = (short)jo.optInt("vendor_name", 0);
            } else {
                for (int i = 0; i < Math.min(this.vendor_name.length, ja_vendor_name.length()); i++) {
                    this.vendor_name[i] = (short)ja_vendor_name.optInt(i,0);
                }
            }
        }
                    
         
        if (jo.has("model_name")) {
            JSONArray ja_model_name = jo.optJSONArray("model_name");
            if (ja_model_name == null) {
                this.model_name[0] = (short)jo.optInt("model_name", 0);
            } else {
                for (int i = 0; i < Math.min(this.model_name.length, ja_model_name.length()); i++) {
                    this.model_name[i] = (short)ja_model_name.optInt(i,0);
                }
            }
        }
                    
        this.lens_id = (short)jo.optInt("lens_id",0);
         
        if (jo.has("cam_definition_uri")) {
            JSONArray ja_cam_definition_uri = jo.optJSONArray("cam_definition_uri");
            if (ja_cam_definition_uri == null) {
                final String js_string_cam_definition_uri = jo.optString("cam_definition_uri");
                final byte[] b_cam_definition_uri = js_string_cam_definition_uri.getBytes();
                System.arraycopy(b_cam_definition_uri, 0, this.cam_definition_uri, 0, Math.min(this.cam_definition_uri.length, b_cam_definition_uri.length));
            } else {
                for (int i = 0; i < Math.min(this.cam_definition_uri.length, ja_cam_definition_uri.length()); i++) {
                    this.cam_definition_uri[i] = (byte)ja_cam_definition_uri.optInt(i,0);
                }
            }
        }
                    
        
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    @Override
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("time_boot_ms", time_boot_ms);
        jo.put("firmware_version", firmware_version);
        jo.put("focal_length", (double)focal_length);
        jo.put("sensor_size_h", (double)sensor_size_h);
        jo.put("sensor_size_v", (double)sensor_size_v);
        jo.put("flags", flags);
        jo.put("resolution_h", resolution_h);
        jo.put("resolution_v", resolution_v);
        jo.put("cam_definition_version", cam_definition_version);
         
        JSONArray ja_vendor_name = new JSONArray();
        for (int i = 0; i < this.vendor_name.length; i++) {
            ja_vendor_name.put(this.vendor_name[i]);
        }
        jo.putOpt("vendor_name", ja_vendor_name);
                
         
        JSONArray ja_model_name = new JSONArray();
        for (int i = 0; i < this.model_name.length; i++) {
            ja_model_name.put(this.model_name[i]);
        }
        jo.putOpt("model_name", ja_model_name);
                
        jo.put("lens_id", lens_id);
         
        JSONArray ja_cam_definition_uri = new JSONArray();
        for (int i = 0; i < this.cam_definition_uri.length; i++) {
            ja_cam_definition_uri.put(this.cam_definition_uri[i]);
        }
        jo.putOpt("cam_definition_uri", ja_cam_definition_uri);
                
        
        
        return jo;
    }

                             
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setCam_Definition_Uri(String str) {
        int len = Math.min(str.length(), 140);
        for (int i=0; i<len; i++) {
            cam_definition_uri[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<140; i++) {            // padding for the rest of the buffer
            cam_definition_uri[i] = 0;
        }
    }

    /**
    * Gets the message, formated as a string
    */
    public String getCam_Definition_Uri() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 140; i++) {
            if (cam_definition_uri[i] != 0)
                buf.append((char) cam_definition_uri[i]);
            else
                break;
        }
        return buf.toString();

    }
                         
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_CAMERA_INFORMATION - sysid:"+sysid+" compid:"+compid+" time_boot_ms:"+time_boot_ms+" firmware_version:"+firmware_version+" focal_length:"+focal_length+" sensor_size_h:"+sensor_size_h+" sensor_size_v:"+sensor_size_v+" flags:"+flags+" resolution_h:"+resolution_h+" resolution_v:"+resolution_v+" cam_definition_version:"+cam_definition_version+" vendor_name:"+vendor_name+" model_name:"+model_name+" lens_id:"+lens_id+" cam_definition_uri:"+cam_definition_uri+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_CAMERA_INFORMATION";
    }
}
        