/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE ATTITUDE_QUATERNION PACKING
package com.mavlink.common;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right), expressed as quaternion. Quaternion order is w, x, y, z and a zero rotation would be expressed as (1 0 0 0).
 */
public class msg_attitude_quaternion extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_ATTITUDE_QUATERNION = 31;
    public static final int MAVLINK_MSG_LENGTH = 48;
    private static final long serialVersionUID = MAVLINK_MSG_ID_ATTITUDE_QUATERNION;

      
    /**
     * Timestamp (time since system boot).
     */
    public long time_boot_ms;
      
    /**
     * Quaternion component 1, w (1 in null-rotation)
     */
    public float q1;
      
    /**
     * Quaternion component 2, x (0 in null-rotation)
     */
    public float q2;
      
    /**
     * Quaternion component 3, y (0 in null-rotation)
     */
    public float q3;
      
    /**
     * Quaternion component 4, z (0 in null-rotation)
     */
    public float q4;
      
    /**
     * Roll angular speed
     */
    public float rollspeed;
      
    /**
     * Pitch angular speed
     */
    public float pitchspeed;
      
    /**
     * Yaw angular speed
     */
    public float yawspeed;
      
    /**
     * Rotation offset by which the attitude quaternion and angular speed vector should be rotated for user display (quaternion with [w, x, y, z] order, zero-rotation is [1, 0, 0, 0], send [0, 0, 0, 0] if field not supported). This field is intended for systems in which the reference attitude may change during flight. For example, tailsitters VTOLs rotate their reference attitude by 90 degrees between hover mode and fixed wing mode, thus repr_offset_q is equal to [1, 0, 0, 0] in hover mode and equal to [0.7071, 0, 0.7071, 0] in fixed wing mode.
     */
    public float[] repr_offset_q = new float[4];
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_ATTITUDE_QUATERNION;
        
        packet.payload.putUnsignedInt(time_boot_ms);
        packet.payload.putFloat(q1);
        packet.payload.putFloat(q2);
        packet.payload.putFloat(q3);
        packet.payload.putFloat(q4);
        packet.payload.putFloat(rollspeed);
        packet.payload.putFloat(pitchspeed);
        packet.payload.putFloat(yawspeed);
        
        if (isMavlink2) {
             
        for (int i = 0; i < repr_offset_q.length; i++) {
            packet.payload.putFloat(repr_offset_q[i]);
        }
                    
            
        }
        return packet;
    }

    /**
     * Decode a attitude_quaternion message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.time_boot_ms = payload.getUnsignedInt();
        this.q1 = payload.getFloat();
        this.q2 = payload.getFloat();
        this.q3 = payload.getFloat();
        this.q4 = payload.getFloat();
        this.rollspeed = payload.getFloat();
        this.pitchspeed = payload.getFloat();
        this.yawspeed = payload.getFloat();
        
        if (isMavlink2) {
              
        for (int i = 0; i < this.repr_offset_q.length; i++) {
            this.repr_offset_q[i] = payload.getFloat();
        }
                
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_attitude_quaternion() {
        this.msgid = MAVLINK_MSG_ID_ATTITUDE_QUATERNION;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_attitude_quaternion( long time_boot_ms, float q1, float q2, float q3, float q4, float rollspeed, float pitchspeed, float yawspeed, float[] repr_offset_q) {
        this.msgid = MAVLINK_MSG_ID_ATTITUDE_QUATERNION;

        this.time_boot_ms = time_boot_ms;
        this.q1 = q1;
        this.q2 = q2;
        this.q3 = q3;
        this.q4 = q4;
        this.rollspeed = rollspeed;
        this.pitchspeed = pitchspeed;
        this.yawspeed = yawspeed;
        this.repr_offset_q = repr_offset_q;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_attitude_quaternion( long time_boot_ms, float q1, float q2, float q3, float q4, float rollspeed, float pitchspeed, float yawspeed, float[] repr_offset_q, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_ATTITUDE_QUATERNION;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.time_boot_ms = time_boot_ms;
        this.q1 = q1;
        this.q2 = q2;
        this.q3 = q3;
        this.q4 = q4;
        this.rollspeed = rollspeed;
        this.pitchspeed = pitchspeed;
        this.yawspeed = yawspeed;
        this.repr_offset_q = repr_offset_q;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_attitude_quaternion(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_ATTITUDE_QUATERNION;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_attitude_quaternion(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_ATTITUDE_QUATERNION;

        readJSONheader(jo);
        
        this.time_boot_ms = jo.optLong("time_boot_ms",0);
        this.q1 = (float)jo.optDouble("q1",0);
        this.q2 = (float)jo.optDouble("q2",0);
        this.q3 = (float)jo.optDouble("q3",0);
        this.q4 = (float)jo.optDouble("q4",0);
        this.rollspeed = (float)jo.optDouble("rollspeed",0);
        this.pitchspeed = (float)jo.optDouble("pitchspeed",0);
        this.yawspeed = (float)jo.optDouble("yawspeed",0);
        
         
        if (jo.has("repr_offset_q")) {
            JSONArray ja_repr_offset_q = jo.optJSONArray("repr_offset_q");
            if (ja_repr_offset_q == null) {
                this.repr_offset_q[0] = (float)jo.optDouble("repr_offset_q", 0);
            } else {
                for (int i = 0; i < Math.min(this.repr_offset_q.length, ja_repr_offset_q.length()); i++) {
                    this.repr_offset_q[i] = (float)ja_repr_offset_q.optDouble(i,0);
                }
            }
        }
                    
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    @Override
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("time_boot_ms", time_boot_ms);
        jo.put("q1", (double)q1);
        jo.put("q2", (double)q2);
        jo.put("q3", (double)q3);
        jo.put("q4", (double)q4);
        jo.put("rollspeed", (double)rollspeed);
        jo.put("pitchspeed", (double)pitchspeed);
        jo.put("yawspeed", (double)yawspeed);
        
         
        JSONArray ja_repr_offset_q = new JSONArray();
        for (int i = 0; i < this.repr_offset_q.length; i++) {
            ja_repr_offset_q.put(this.repr_offset_q[i]);
        }
        jo.putOpt("repr_offset_q", ja_repr_offset_q);
                
        
        return jo;
    }

                      
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_ATTITUDE_QUATERNION - sysid:"+sysid+" compid:"+compid+" time_boot_ms:"+time_boot_ms+" q1:"+q1+" q2:"+q2+" q3:"+q3+" q4:"+q4+" rollspeed:"+rollspeed+" pitchspeed:"+pitchspeed+" yawspeed:"+yawspeed+" repr_offset_q:"+repr_offset_q+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_ATTITUDE_QUATERNION";
    }
}
        