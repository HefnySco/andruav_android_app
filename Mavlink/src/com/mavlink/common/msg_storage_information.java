/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE STORAGE_INFORMATION PACKING
package com.mavlink.common;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * Information about a storage medium. This message is sent in response to a request and whenever the status of the storage changes (STORAGE_STATUS).
 */
public class msg_storage_information extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_STORAGE_INFORMATION = 261;
    public static final int MAVLINK_MSG_LENGTH = 27;
    private static final long serialVersionUID = MAVLINK_MSG_ID_STORAGE_INFORMATION;

      
    /**
     * Timestamp (time since system boot).
     */
    public long time_boot_ms;
      
    /**
     * Total capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.
     */
    public float total_capacity;
      
    /**
     * Used capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.
     */
    public float used_capacity;
      
    /**
     * Available storage capacity. If storage is not ready (STORAGE_STATUS_READY) value will be ignored.
     */
    public float available_capacity;
      
    /**
     * Read speed.
     */
    public float read_speed;
      
    /**
     * Write speed.
     */
    public float write_speed;
      
    /**
     * Storage ID (1 for first, 2 for second, etc.)
     */
    public short storage_id;
      
    /**
     * Number of storage devices
     */
    public short storage_count;
      
    /**
     * Status of storage
     */
    public short status;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_STORAGE_INFORMATION;
        
        packet.payload.putUnsignedInt(time_boot_ms);
        packet.payload.putFloat(total_capacity);
        packet.payload.putFloat(used_capacity);
        packet.payload.putFloat(available_capacity);
        packet.payload.putFloat(read_speed);
        packet.payload.putFloat(write_speed);
        packet.payload.putUnsignedByte(storage_id);
        packet.payload.putUnsignedByte(storage_count);
        packet.payload.putUnsignedByte(status);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a storage_information message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.time_boot_ms = payload.getUnsignedInt();
        this.total_capacity = payload.getFloat();
        this.used_capacity = payload.getFloat();
        this.available_capacity = payload.getFloat();
        this.read_speed = payload.getFloat();
        this.write_speed = payload.getFloat();
        this.storage_id = payload.getUnsignedByte();
        this.storage_count = payload.getUnsignedByte();
        this.status = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_storage_information() {
        this.msgid = MAVLINK_MSG_ID_STORAGE_INFORMATION;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_storage_information( long time_boot_ms, float total_capacity, float used_capacity, float available_capacity, float read_speed, float write_speed, short storage_id, short storage_count, short status) {
        this.msgid = MAVLINK_MSG_ID_STORAGE_INFORMATION;

        this.time_boot_ms = time_boot_ms;
        this.total_capacity = total_capacity;
        this.used_capacity = used_capacity;
        this.available_capacity = available_capacity;
        this.read_speed = read_speed;
        this.write_speed = write_speed;
        this.storage_id = storage_id;
        this.storage_count = storage_count;
        this.status = status;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_storage_information( long time_boot_ms, float total_capacity, float used_capacity, float available_capacity, float read_speed, float write_speed, short storage_id, short storage_count, short status, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_STORAGE_INFORMATION;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.time_boot_ms = time_boot_ms;
        this.total_capacity = total_capacity;
        this.used_capacity = used_capacity;
        this.available_capacity = available_capacity;
        this.read_speed = read_speed;
        this.write_speed = write_speed;
        this.storage_id = storage_id;
        this.storage_count = storage_count;
        this.status = status;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_storage_information(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_STORAGE_INFORMATION;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_storage_information(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_STORAGE_INFORMATION;

        readJSONheader(jo);
        
        this.time_boot_ms = jo.optLong("time_boot_ms",0);
        this.total_capacity = (float)jo.optDouble("total_capacity",0);
        this.used_capacity = (float)jo.optDouble("used_capacity",0);
        this.available_capacity = (float)jo.optDouble("available_capacity",0);
        this.read_speed = (float)jo.optDouble("read_speed",0);
        this.write_speed = (float)jo.optDouble("write_speed",0);
        this.storage_id = (short)jo.optInt("storage_id",0);
        this.storage_count = (short)jo.optInt("storage_count",0);
        this.status = (short)jo.optInt("status",0);
        
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    @Override
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("time_boot_ms", time_boot_ms);
        jo.put("total_capacity", (double)total_capacity);
        jo.put("used_capacity", (double)used_capacity);
        jo.put("available_capacity", (double)available_capacity);
        jo.put("read_speed", (double)read_speed);
        jo.put("write_speed", (double)write_speed);
        jo.put("storage_id", storage_id);
        jo.put("storage_count", storage_count);
        jo.put("status", status);
        
        
        return jo;
    }

                      
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_STORAGE_INFORMATION - sysid:"+sysid+" compid:"+compid+" time_boot_ms:"+time_boot_ms+" total_capacity:"+total_capacity+" used_capacity:"+used_capacity+" available_capacity:"+available_capacity+" read_speed:"+read_speed+" write_speed:"+write_speed+" storage_id:"+storage_id+" storage_count:"+storage_count+" status:"+status+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_STORAGE_INFORMATION";
    }
}
        