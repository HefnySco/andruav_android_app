/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE REQUEST_DATA_STREAM PACKING
package com.mavlink.common;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * Request a data stream.
 */
public class msg_request_data_stream extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_REQUEST_DATA_STREAM = 66;
    public static final int MAVLINK_MSG_LENGTH = 6;
    private static final long serialVersionUID = MAVLINK_MSG_ID_REQUEST_DATA_STREAM;

      
    /**
     * The requested message rate
     */
    public int req_message_rate;
      
    /**
     * The target requested to send the message stream.
     */
    public short target_system;
      
    /**
     * The target requested to send the message stream.
     */
    public short target_component;
      
    /**
     * The ID of the requested data stream
     */
    public short req_stream_id;
      
    /**
     * 1 to start sending, 0 to stop sending.
     */
    public short start_stop;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_REQUEST_DATA_STREAM;
        
        packet.payload.putUnsignedShort(req_message_rate);
        packet.payload.putUnsignedByte(target_system);
        packet.payload.putUnsignedByte(target_component);
        packet.payload.putUnsignedByte(req_stream_id);
        packet.payload.putUnsignedByte(start_stop);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a request_data_stream message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.req_message_rate = payload.getUnsignedShort();
        this.target_system = payload.getUnsignedByte();
        this.target_component = payload.getUnsignedByte();
        this.req_stream_id = payload.getUnsignedByte();
        this.start_stop = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_request_data_stream() {
        this.msgid = MAVLINK_MSG_ID_REQUEST_DATA_STREAM;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_request_data_stream( int req_message_rate, short target_system, short target_component, short req_stream_id, short start_stop) {
        this.msgid = MAVLINK_MSG_ID_REQUEST_DATA_STREAM;

        this.req_message_rate = req_message_rate;
        this.target_system = target_system;
        this.target_component = target_component;
        this.req_stream_id = req_stream_id;
        this.start_stop = start_stop;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_request_data_stream( int req_message_rate, short target_system, short target_component, short req_stream_id, short start_stop, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_REQUEST_DATA_STREAM;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.req_message_rate = req_message_rate;
        this.target_system = target_system;
        this.target_component = target_component;
        this.req_stream_id = req_stream_id;
        this.start_stop = start_stop;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_request_data_stream(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_REQUEST_DATA_STREAM;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_request_data_stream(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_REQUEST_DATA_STREAM;

        readJSONheader(jo);
        
        this.req_message_rate = jo.optInt("req_message_rate",0);
        this.target_system = (short)jo.optInt("target_system",0);
        this.target_component = (short)jo.optInt("target_component",0);
        this.req_stream_id = (short)jo.optInt("req_stream_id",0);
        this.start_stop = (short)jo.optInt("start_stop",0);
        
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    @Override
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("req_message_rate", req_message_rate);
        jo.put("target_system", target_system);
        jo.put("target_component", target_component);
        jo.put("req_stream_id", req_stream_id);
        jo.put("start_stop", start_stop);
        
        
        return jo;
    }

              
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_REQUEST_DATA_STREAM - sysid:"+sysid+" compid:"+compid+" req_message_rate:"+req_message_rate+" target_system:"+target_system+" target_component:"+target_component+" req_stream_id:"+req_stream_id+" start_stop:"+start_stop+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_REQUEST_DATA_STREAM";
    }
}
        