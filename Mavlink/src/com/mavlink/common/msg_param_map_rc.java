/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE PARAM_MAP_RC PACKING
package com.mavlink.common;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * Bind a RC channel to a parameter. The parameter should change according to the RC channel value.
 */
public class msg_param_map_rc extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_PARAM_MAP_RC = 50;
    public static final int MAVLINK_MSG_LENGTH = 37;
    private static final long serialVersionUID = MAVLINK_MSG_ID_PARAM_MAP_RC;

      
    /**
     * Initial parameter value
     */
    public float param_value0;
      
    /**
     * Scale, maps the RC range [-1, 1] to a parameter value
     */
    public float scale;
      
    /**
     * Minimum param value. The protocol does not define if this overwrites an onboard minimum value. (Depends on implementation)
     */
    public float param_value_min;
      
    /**
     * Maximum param value. The protocol does not define if this overwrites an onboard maximum value. (Depends on implementation)
     */
    public float param_value_max;
      
    /**
     * Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored), send -2 to disable any existing map for this rc_channel_index.
     */
    public short param_index;
      
    /**
     * System ID
     */
    public short target_system;
      
    /**
     * Component ID
     */
    public short target_component;
      
    /**
     * Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
     */
    public byte[] param_id = new byte[16];
      
    /**
     * Index of parameter RC channel. Not equal to the RC channel id. Typically corresponds to a potentiometer-knob on the RC.
     */
    public short parameter_rc_channel_index;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_PARAM_MAP_RC;
        
        packet.payload.putFloat(param_value0);
        packet.payload.putFloat(scale);
        packet.payload.putFloat(param_value_min);
        packet.payload.putFloat(param_value_max);
        packet.payload.putShort(param_index);
        packet.payload.putUnsignedByte(target_system);
        packet.payload.putUnsignedByte(target_component);
        
        for (int i = 0; i < param_id.length; i++) {
            packet.payload.putByte(param_id[i]);
        }
                    
        packet.payload.putUnsignedByte(parameter_rc_channel_index);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a param_map_rc message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.param_value0 = payload.getFloat();
        this.scale = payload.getFloat();
        this.param_value_min = payload.getFloat();
        this.param_value_max = payload.getFloat();
        this.param_index = payload.getShort();
        this.target_system = payload.getUnsignedByte();
        this.target_component = payload.getUnsignedByte();
         
        for (int i = 0; i < this.param_id.length; i++) {
            this.param_id[i] = payload.getByte();
        }
                
        this.parameter_rc_channel_index = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_param_map_rc() {
        this.msgid = MAVLINK_MSG_ID_PARAM_MAP_RC;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_param_map_rc( float param_value0, float scale, float param_value_min, float param_value_max, short param_index, short target_system, short target_component, byte[] param_id, short parameter_rc_channel_index) {
        this.msgid = MAVLINK_MSG_ID_PARAM_MAP_RC;

        this.param_value0 = param_value0;
        this.scale = scale;
        this.param_value_min = param_value_min;
        this.param_value_max = param_value_max;
        this.param_index = param_index;
        this.target_system = target_system;
        this.target_component = target_component;
        this.param_id = param_id;
        this.parameter_rc_channel_index = parameter_rc_channel_index;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_param_map_rc( float param_value0, float scale, float param_value_min, float param_value_max, short param_index, short target_system, short target_component, byte[] param_id, short parameter_rc_channel_index, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_PARAM_MAP_RC;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.param_value0 = param_value0;
        this.scale = scale;
        this.param_value_min = param_value_min;
        this.param_value_max = param_value_max;
        this.param_index = param_index;
        this.target_system = target_system;
        this.target_component = target_component;
        this.param_id = param_id;
        this.parameter_rc_channel_index = parameter_rc_channel_index;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_param_map_rc(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_PARAM_MAP_RC;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_param_map_rc(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_PARAM_MAP_RC;

        readJSONheader(jo);
        
        this.param_value0 = (float)jo.optDouble("param_value0",0);
        this.scale = (float)jo.optDouble("scale",0);
        this.param_value_min = (float)jo.optDouble("param_value_min",0);
        this.param_value_max = (float)jo.optDouble("param_value_max",0);
        this.param_index = (short)jo.optInt("param_index",0);
        this.target_system = (short)jo.optInt("target_system",0);
        this.target_component = (short)jo.optInt("target_component",0);
         
        if (jo.has("param_id")) {
            JSONArray ja_param_id = jo.optJSONArray("param_id");
            if (ja_param_id == null) {
                final String js_string_param_id = jo.optString("param_id");
                final byte[] b_param_id = js_string_param_id.getBytes();
                System.arraycopy(b_param_id, 0, this.param_id, 0, Math.min(this.param_id.length, b_param_id.length));
            } else {
                for (int i = 0; i < Math.min(this.param_id.length, ja_param_id.length()); i++) {
                    this.param_id[i] = (byte)ja_param_id.optInt(i,0);
                }
            }
        }
                    
        this.parameter_rc_channel_index = (short)jo.optInt("parameter_rc_channel_index",0);
        
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    @Override
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("param_value0", (double)param_value0);
        jo.put("scale", (double)scale);
        jo.put("param_value_min", (double)param_value_min);
        jo.put("param_value_max", (double)param_value_max);
        jo.put("param_index", param_index);
        jo.put("target_system", target_system);
        jo.put("target_component", target_component);
         
        JSONArray ja_param_id = new JSONArray();
        for (int i = 0; i < this.param_id.length; i++) {
            ja_param_id.put(this.param_id[i]);
        }
        jo.putOpt("param_id", ja_param_id);
                
        jo.put("parameter_rc_channel_index", parameter_rc_channel_index);
        
        
        return jo;
    }

                   
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setParam_Id(String str) {
        int len = Math.min(str.length(), 16);
        for (int i=0; i<len; i++) {
            param_id[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<16; i++) {            // padding for the rest of the buffer
            param_id[i] = 0;
        }
    }

    /**
    * Gets the message, formated as a string
    */
    public String getParam_Id() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 16; i++) {
            if (param_id[i] != 0)
                buf.append((char) param_id[i]);
            else
                break;
        }
        return buf.toString();

    }
                           
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_PARAM_MAP_RC - sysid:"+sysid+" compid:"+compid+" param_value0:"+param_value0+" scale:"+scale+" param_value_min:"+param_value_min+" param_value_max:"+param_value_max+" param_index:"+param_index+" target_system:"+target_system+" target_component:"+target_component+" param_id:"+param_id+" parameter_rc_channel_index:"+parameter_rc_channel_index+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_PARAM_MAP_RC";
    }
}
        