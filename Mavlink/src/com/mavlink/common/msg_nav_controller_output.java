/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE NAV_CONTROLLER_OUTPUT PACKING
package com.mavlink.common;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * The state of the fixed wing navigation and position controller.
 */
public class msg_nav_controller_output extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT = 62;
    public static final int MAVLINK_MSG_LENGTH = 26;
    private static final long serialVersionUID = MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT;

      
    /**
     * Current desired roll
     */
    public float nav_roll;
      
    /**
     * Current desired pitch
     */
    public float nav_pitch;
      
    /**
     * Current altitude error
     */
    public float alt_error;
      
    /**
     * Current airspeed error
     */
    public float aspd_error;
      
    /**
     * Current crosstrack error on x-y plane
     */
    public float xtrack_error;
      
    /**
     * Current desired heading
     */
    public short nav_bearing;
      
    /**
     * Bearing to current waypoint/target
     */
    public short target_bearing;
      
    /**
     * Distance to active waypoint
     */
    public int wp_dist;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT;
        
        packet.payload.putFloat(nav_roll);
        packet.payload.putFloat(nav_pitch);
        packet.payload.putFloat(alt_error);
        packet.payload.putFloat(aspd_error);
        packet.payload.putFloat(xtrack_error);
        packet.payload.putShort(nav_bearing);
        packet.payload.putShort(target_bearing);
        packet.payload.putUnsignedShort(wp_dist);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a nav_controller_output message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.nav_roll = payload.getFloat();
        this.nav_pitch = payload.getFloat();
        this.alt_error = payload.getFloat();
        this.aspd_error = payload.getFloat();
        this.xtrack_error = payload.getFloat();
        this.nav_bearing = payload.getShort();
        this.target_bearing = payload.getShort();
        this.wp_dist = payload.getUnsignedShort();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_nav_controller_output() {
        this.msgid = MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_nav_controller_output( float nav_roll, float nav_pitch, float alt_error, float aspd_error, float xtrack_error, short nav_bearing, short target_bearing, int wp_dist) {
        this.msgid = MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT;

        this.nav_roll = nav_roll;
        this.nav_pitch = nav_pitch;
        this.alt_error = alt_error;
        this.aspd_error = aspd_error;
        this.xtrack_error = xtrack_error;
        this.nav_bearing = nav_bearing;
        this.target_bearing = target_bearing;
        this.wp_dist = wp_dist;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_nav_controller_output( float nav_roll, float nav_pitch, float alt_error, float aspd_error, float xtrack_error, short nav_bearing, short target_bearing, int wp_dist, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.nav_roll = nav_roll;
        this.nav_pitch = nav_pitch;
        this.alt_error = alt_error;
        this.aspd_error = aspd_error;
        this.xtrack_error = xtrack_error;
        this.nav_bearing = nav_bearing;
        this.target_bearing = target_bearing;
        this.wp_dist = wp_dist;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_nav_controller_output(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_nav_controller_output(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT;

        readJSONheader(jo);
        
        this.nav_roll = (float)jo.optDouble("nav_roll",0);
        this.nav_pitch = (float)jo.optDouble("nav_pitch",0);
        this.alt_error = (float)jo.optDouble("alt_error",0);
        this.aspd_error = (float)jo.optDouble("aspd_error",0);
        this.xtrack_error = (float)jo.optDouble("xtrack_error",0);
        this.nav_bearing = (short)jo.optInt("nav_bearing",0);
        this.target_bearing = (short)jo.optInt("target_bearing",0);
        this.wp_dist = jo.optInt("wp_dist",0);
        
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    @Override
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("nav_roll", (double)nav_roll);
        jo.put("nav_pitch", (double)nav_pitch);
        jo.put("alt_error", (double)alt_error);
        jo.put("aspd_error", (double)aspd_error);
        jo.put("xtrack_error", (double)xtrack_error);
        jo.put("nav_bearing", nav_bearing);
        jo.put("target_bearing", target_bearing);
        jo.put("wp_dist", wp_dist);
        
        
        return jo;
    }

                    
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT - sysid:"+sysid+" compid:"+compid+" nav_roll:"+nav_roll+" nav_pitch:"+nav_pitch+" alt_error:"+alt_error+" aspd_error:"+aspd_error+" xtrack_error:"+xtrack_error+" nav_bearing:"+nav_bearing+" target_bearing:"+target_bearing+" wp_dist:"+wp_dist+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT";
    }
}
        