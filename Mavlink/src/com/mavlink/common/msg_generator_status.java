/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE GENERATOR_STATUS PACKING
package com.mavlink.common;
import com.mavlink.MAVLinkPacket;
import com.mavlink.messages.MAVLinkMessage;
import com.mavlink.messages.MAVLinkPayload;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

        
/**
 * Telemetry of power generation system. Alternator or mechanical generator.
 */
public class msg_generator_status extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_GENERATOR_STATUS = 373;
    public static final int MAVLINK_MSG_LENGTH = 42;
    private static final long serialVersionUID = MAVLINK_MSG_ID_GENERATOR_STATUS;

      
    /**
     * Status flags.
     */
    public long status;
      
    /**
     * Current into/out of battery. Positive for out. Negative for in. NaN: field not provided.
     */
    public float battery_current;
      
    /**
     * Current going to the UAV. If battery current not available this is the DC current from the generator. Positive for out. Negative for in. NaN: field not provided
     */
    public float load_current;
      
    /**
     * The power being generated. NaN: field not provided
     */
    public float power_generated;
      
    /**
     * Voltage of the bus seen at the generator, or battery bus if battery bus is controlled by generator and at a different voltage to main bus.
     */
    public float bus_voltage;
      
    /**
     * The target battery current. Positive for out. Negative for in. NaN: field not provided
     */
    public float bat_current_setpoint;
      
    /**
     * Seconds this generator has run since it was rebooted. UINT32_MAX: field not provided.
     */
    public long runtime;
      
    /**
     * Seconds until this generator requires maintenance.  A negative value indicates maintenance is past-due. INT32_MAX: field not provided.
     */
    public int time_until_maintenance;
      
    /**
     * Speed of electrical generator or alternator. UINT16_MAX: field not provided.
     */
    public int generator_speed;
      
    /**
     * The temperature of the rectifier or power converter. INT16_MAX: field not provided.
     */
    public short rectifier_temperature;
      
    /**
     * The temperature of the mechanical motor, fuel cell core or generator. INT16_MAX: field not provided.
     */
    public short generator_temperature;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_GENERATOR_STATUS;
        
        packet.payload.putUnsignedLong(status);
        packet.payload.putFloat(battery_current);
        packet.payload.putFloat(load_current);
        packet.payload.putFloat(power_generated);
        packet.payload.putFloat(bus_voltage);
        packet.payload.putFloat(bat_current_setpoint);
        packet.payload.putUnsignedInt(runtime);
        packet.payload.putInt(time_until_maintenance);
        packet.payload.putUnsignedShort(generator_speed);
        packet.payload.putShort(rectifier_temperature);
        packet.payload.putShort(generator_temperature);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a generator_status message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.status = payload.getUnsignedLong();
        this.battery_current = payload.getFloat();
        this.load_current = payload.getFloat();
        this.power_generated = payload.getFloat();
        this.bus_voltage = payload.getFloat();
        this.bat_current_setpoint = payload.getFloat();
        this.runtime = payload.getUnsignedInt();
        this.time_until_maintenance = payload.getInt();
        this.generator_speed = payload.getUnsignedShort();
        this.rectifier_temperature = payload.getShort();
        this.generator_temperature = payload.getShort();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_generator_status() {
        this.msgid = MAVLINK_MSG_ID_GENERATOR_STATUS;
    }
    
    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_generator_status( long status, float battery_current, float load_current, float power_generated, float bus_voltage, float bat_current_setpoint, long runtime, int time_until_maintenance, int generator_speed, short rectifier_temperature, short generator_temperature) {
        this.msgid = MAVLINK_MSG_ID_GENERATOR_STATUS;

        this.status = status;
        this.battery_current = battery_current;
        this.load_current = load_current;
        this.power_generated = power_generated;
        this.bus_voltage = bus_voltage;
        this.bat_current_setpoint = bat_current_setpoint;
        this.runtime = runtime;
        this.time_until_maintenance = time_until_maintenance;
        this.generator_speed = generator_speed;
        this.rectifier_temperature = rectifier_temperature;
        this.generator_temperature = generator_temperature;
        
    }
    
    /**
     * Constructor for a new message, initializes everything
     */
    public msg_generator_status( long status, float battery_current, float load_current, float power_generated, float bus_voltage, float bat_current_setpoint, long runtime, int time_until_maintenance, int generator_speed, short rectifier_temperature, short generator_temperature, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_GENERATOR_STATUS;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.status = status;
        this.battery_current = battery_current;
        this.load_current = load_current;
        this.power_generated = power_generated;
        this.bus_voltage = bus_voltage;
        this.bat_current_setpoint = bat_current_setpoint;
        this.runtime = runtime;
        this.time_until_maintenance = time_until_maintenance;
        this.generator_speed = generator_speed;
        this.rectifier_temperature = rectifier_temperature;
        this.generator_temperature = generator_temperature;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_generator_status(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_GENERATOR_STATUS;
        
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from JSON Object
     */
    public msg_generator_status(JSONObject jo) {
        this.msgid = MAVLINK_MSG_ID_GENERATOR_STATUS;

        readJSONheader(jo);
        
         
        if (jo.has("status")) {
            final JSONArray ja_status = jo.optJSONArray("status");
            if (ja_status == null) {
                this.status = jo.optLong("status", 0);
            } else if (ja_status.length() > 0) {
                this.status = ja_status.optLong(0, 0);
            }
        }
                    
        this.battery_current = (float)jo.optDouble("battery_current",0);
        this.load_current = (float)jo.optDouble("load_current",0);
        this.power_generated = (float)jo.optDouble("power_generated",0);
        this.bus_voltage = (float)jo.optDouble("bus_voltage",0);
        this.bat_current_setpoint = (float)jo.optDouble("bat_current_setpoint",0);
        this.runtime = jo.optLong("runtime",0);
        this.time_until_maintenance = jo.optInt("time_until_maintenance",0);
        this.generator_speed = jo.optInt("generator_speed",0);
        this.rectifier_temperature = (short)jo.optInt("rectifier_temperature",0);
        this.generator_temperature = (short)jo.optInt("generator_temperature",0);
        
        
    }
    
    /**
     * Convert this class to a JSON Object
     */
    @Override
    public JSONObject toJSON() throws JSONException {
        final JSONObject jo = getJSONheader();
        
        jo.put("status", status);
        jo.put("battery_current", (double)battery_current);
        jo.put("load_current", (double)load_current);
        jo.put("power_generated", (double)power_generated);
        jo.put("bus_voltage", (double)bus_voltage);
        jo.put("bat_current_setpoint", (double)bat_current_setpoint);
        jo.put("runtime", runtime);
        jo.put("time_until_maintenance", time_until_maintenance);
        jo.put("generator_speed", generator_speed);
        jo.put("rectifier_temperature", rectifier_temperature);
        jo.put("generator_temperature", generator_temperature);
        
        
        return jo;
    }

                          
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_GENERATOR_STATUS - sysid:"+sysid+" compid:"+compid+" status:"+status+" battery_current:"+battery_current+" load_current:"+load_current+" power_generated:"+power_generated+" bus_voltage:"+bus_voltage+" bat_current_setpoint:"+bat_current_setpoint+" runtime:"+runtime+" time_until_maintenance:"+time_until_maintenance+" generator_speed:"+generator_speed+" rectifier_temperature:"+rectifier_temperature+" generator_temperature:"+generator_temperature+"";
    }
    
    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_GENERATOR_STATUS";
    }
}
        