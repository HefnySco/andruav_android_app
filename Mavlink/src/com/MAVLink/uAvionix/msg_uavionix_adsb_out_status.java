/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE UAVIONIX_ADSB_OUT_STATUS PACKING
package com.MAVLink.uAvionix;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * Status message with information from UCP Heartbeat and Status messages.
 */
public class msg_uavionix_adsb_out_status extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_UAVIONIX_ADSB_OUT_STATUS = 10008;
    public static final int MAVLINK_MSG_LENGTH = 14;
    private static final long serialVersionUID = MAVLINK_MSG_ID_UAVIONIX_ADSB_OUT_STATUS;

    
    /**
     * Mode A code (typically 1200 [0x04B0] for VFR)
     */
    @Description("Mode A code (typically 1200 [0x04B0] for VFR)")
    @Units("")
    public int squawk;
    
    /**
     * ADS-B transponder status state flags
     */
    @Description("ADS-B transponder status state flags")
    @Units("")
    public short state;
    
    /**
     * Integrity and Accuracy of traffic reported as a 4-bit value for each field (NACp 7:4, NIC 3:0) and encoded by Containment Radius (HPL) and Estimated Position Uncertainty (HFOM), respectively
     */
    @Description("Integrity and Accuracy of traffic reported as a 4-bit value for each field (NACp 7:4, NIC 3:0) and encoded by Containment Radius (HPL) and Estimated Position Uncertainty (HFOM), respectively")
    @Units("")
    public short NIC_NACp;
    
    /**
     * Board temperature in C
     */
    @Description("Board temperature in C")
    @Units("")
    public short boardTemp;
    
    /**
     * ADS-B transponder fault flags
     */
    @Description("ADS-B transponder fault flags")
    @Units("")
    public short fault;
    
    /**
     * Flight Identification: 8 ASCII characters, '0' through '9', 'A' through 'Z' or space. Spaces (0x20) used as a trailing pad character, or when call sign is unavailable.
     */
    @Description("Flight Identification: 8 ASCII characters, '0' through '9', 'A' through 'Z' or space. Spaces (0x20) used as a trailing pad character, or when call sign is unavailable.")
    @Units("")
    public byte flight_id[] = new byte[8];
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_UAVIONIX_ADSB_OUT_STATUS;

        packet.payload.putUnsignedShort(squawk);
        packet.payload.putUnsignedByte(state);
        packet.payload.putUnsignedByte(NIC_NACp);
        packet.payload.putUnsignedByte(boardTemp);
        packet.payload.putUnsignedByte(fault);
        
        for (int i = 0; i < flight_id.length; i++) {
            packet.payload.putByte(flight_id[i]);
        }
                    
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a uavionix_adsb_out_status message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.squawk = payload.getUnsignedShort();
        this.state = payload.getUnsignedByte();
        this.NIC_NACp = payload.getUnsignedByte();
        this.boardTemp = payload.getUnsignedByte();
        this.fault = payload.getUnsignedByte();
        
        for (int i = 0; i < this.flight_id.length; i++) {
            this.flight_id[i] = payload.getByte();
        }
                
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_uavionix_adsb_out_status() {
        this.msgid = MAVLINK_MSG_ID_UAVIONIX_ADSB_OUT_STATUS;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_uavionix_adsb_out_status( int squawk, short state, short NIC_NACp, short boardTemp, short fault, byte[] flight_id) {
        this.msgid = MAVLINK_MSG_ID_UAVIONIX_ADSB_OUT_STATUS;

        this.squawk = squawk;
        this.state = state;
        this.NIC_NACp = NIC_NACp;
        this.boardTemp = boardTemp;
        this.fault = fault;
        this.flight_id = flight_id;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_uavionix_adsb_out_status( int squawk, short state, short NIC_NACp, short boardTemp, short fault, byte[] flight_id, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_UAVIONIX_ADSB_OUT_STATUS;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.squawk = squawk;
        this.state = state;
        this.NIC_NACp = NIC_NACp;
        this.boardTemp = boardTemp;
        this.fault = fault;
        this.flight_id = flight_id;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_uavionix_adsb_out_status(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_UAVIONIX_ADSB_OUT_STATUS;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

               
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setFlight_Id(String str) {
        int len = Math.min(str.length(), 8);
        for (int i=0; i<len; i++) {
            flight_id[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<8; i++) {            // padding for the rest of the buffer
            flight_id[i] = 0;
        }
    }

    /**
    * Gets the message, formatted as a string
    */
    public String getFlight_Id() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 8; i++) {
            if (flight_id[i] != 0)
                buf.append((char) flight_id[i]);
            else
                break;
        }
        return buf.toString();

    }
                         
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_UAVIONIX_ADSB_OUT_STATUS - sysid:"+sysid+" compid:"+compid+" squawk:"+squawk+" state:"+state+" NIC_NACp:"+NIC_NACp+" boardTemp:"+boardTemp+" fault:"+fault+" flight_id:"+flight_id+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_UAVIONIX_ADSB_OUT_STATUS";
    }
}
        