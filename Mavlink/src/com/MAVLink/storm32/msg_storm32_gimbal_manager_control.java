/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE STORM32_GIMBAL_MANAGER_CONTROL PACKING
package com.MAVLink.storm32;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.messages.MAVLinkMessage;
import com.MAVLink.messages.MAVLinkPayload;
import com.MAVLink.messages.Units;
import com.MAVLink.messages.Description;

/**
 * Message to a gimbal manager to control the gimbal attitude. Angles and rates can be set to NaN according to use case. A gimbal device is never to react to this message.
 */
public class msg_storm32_gimbal_manager_control extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_STORM32_GIMBAL_MANAGER_CONTROL = 60012;
    public static final int MAVLINK_MSG_LENGTH = 36;
    private static final long serialVersionUID = MAVLINK_MSG_ID_STORM32_GIMBAL_MANAGER_CONTROL;

    
    /**
     * Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation, the frame is determined by the GIMBAL_MANAGER_FLAGS_ABSOLUTE_YAW flag, set first element to NaN to be ignored).
     */
    @Description("Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation, the frame is determined by the GIMBAL_MANAGER_FLAGS_ABSOLUTE_YAW flag, set first element to NaN to be ignored).")
    @Units("")
    public float[] q = new float[4];
    
    /**
     * X component of angular velocity (positive: roll to the right, NaN to be ignored).
     */
    @Description("X component of angular velocity (positive: roll to the right, NaN to be ignored).")
    @Units("rad/s")
    public float angular_velocity_x;
    
    /**
     * Y component of angular velocity (positive: tilt up, NaN to be ignored).
     */
    @Description("Y component of angular velocity (positive: tilt up, NaN to be ignored).")
    @Units("rad/s")
    public float angular_velocity_y;
    
    /**
     * Z component of angular velocity (positive: pan to the right, the frame is determined by the STORM32_GIMBAL_DEVICE_FLAGS_YAW_ABSOLUTE flag, NaN to be ignored).
     */
    @Description("Z component of angular velocity (positive: pan to the right, the frame is determined by the STORM32_GIMBAL_DEVICE_FLAGS_YAW_ABSOLUTE flag, NaN to be ignored).")
    @Units("rad/s")
    public float angular_velocity_z;
    
    /**
     * Gimbal device flags (UINT16_MAX to be ignored).
     */
    @Description("Gimbal device flags (UINT16_MAX to be ignored).")
    @Units("")
    public int device_flags;
    
    /**
     * Gimbal manager flags (0 to be ignored).
     */
    @Description("Gimbal manager flags (0 to be ignored).")
    @Units("")
    public int manager_flags;
    
    /**
     * System ID
     */
    @Description("System ID")
    @Units("")
    public short target_system;
    
    /**
     * Component ID
     */
    @Description("Component ID")
    @Units("")
    public short target_component;
    
    /**
     * Gimbal ID of the gimbal manager to address (component ID or 1-6 for non-MAVLink gimbal, 0 for all gimbals, send command multiple times for more than one but not all gimbals).
     */
    @Description("Gimbal ID of the gimbal manager to address (component ID or 1-6 for non-MAVLink gimbal, 0 for all gimbals, send command multiple times for more than one but not all gimbals).")
    @Units("")
    public short gimbal_id;
    
    /**
     * Client which is contacting the gimbal manager (must be set).
     */
    @Description("Client which is contacting the gimbal manager (must be set).")
    @Units("")
    public short client;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_STORM32_GIMBAL_MANAGER_CONTROL;

        
        for (int i = 0; i < q.length; i++) {
            packet.payload.putFloat(q[i]);
        }
                    
        packet.payload.putFloat(angular_velocity_x);
        packet.payload.putFloat(angular_velocity_y);
        packet.payload.putFloat(angular_velocity_z);
        packet.payload.putUnsignedShort(device_flags);
        packet.payload.putUnsignedShort(manager_flags);
        packet.payload.putUnsignedByte(target_system);
        packet.payload.putUnsignedByte(target_component);
        packet.payload.putUnsignedByte(gimbal_id);
        packet.payload.putUnsignedByte(client);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a storm32_gimbal_manager_control message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        
        for (int i = 0; i < this.q.length; i++) {
            this.q[i] = payload.getFloat();
        }
                
        this.angular_velocity_x = payload.getFloat();
        this.angular_velocity_y = payload.getFloat();
        this.angular_velocity_z = payload.getFloat();
        this.device_flags = payload.getUnsignedShort();
        this.manager_flags = payload.getUnsignedShort();
        this.target_system = payload.getUnsignedByte();
        this.target_component = payload.getUnsignedByte();
        this.gimbal_id = payload.getUnsignedByte();
        this.client = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_storm32_gimbal_manager_control() {
        this.msgid = MAVLINK_MSG_ID_STORM32_GIMBAL_MANAGER_CONTROL;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_storm32_gimbal_manager_control( float[] q, float angular_velocity_x, float angular_velocity_y, float angular_velocity_z, int device_flags, int manager_flags, short target_system, short target_component, short gimbal_id, short client) {
        this.msgid = MAVLINK_MSG_ID_STORM32_GIMBAL_MANAGER_CONTROL;

        this.q = q;
        this.angular_velocity_x = angular_velocity_x;
        this.angular_velocity_y = angular_velocity_y;
        this.angular_velocity_z = angular_velocity_z;
        this.device_flags = device_flags;
        this.manager_flags = manager_flags;
        this.target_system = target_system;
        this.target_component = target_component;
        this.gimbal_id = gimbal_id;
        this.client = client;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_storm32_gimbal_manager_control( float[] q, float angular_velocity_x, float angular_velocity_y, float angular_velocity_z, int device_flags, int manager_flags, short target_system, short target_component, short gimbal_id, short client, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_STORM32_GIMBAL_MANAGER_CONTROL;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.q = q;
        this.angular_velocity_x = angular_velocity_x;
        this.angular_velocity_y = angular_velocity_y;
        this.angular_velocity_z = angular_velocity_z;
        this.device_flags = device_flags;
        this.manager_flags = manager_flags;
        this.target_system = target_system;
        this.target_component = target_component;
        this.gimbal_id = gimbal_id;
        this.client = client;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_storm32_gimbal_manager_control(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_STORM32_GIMBAL_MANAGER_CONTROL;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                        
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_STORM32_GIMBAL_MANAGER_CONTROL - sysid:"+sysid+" compid:"+compid+" q:"+q+" angular_velocity_x:"+angular_velocity_x+" angular_velocity_y:"+angular_velocity_y+" angular_velocity_z:"+angular_velocity_z+" device_flags:"+device_flags+" manager_flags:"+manager_flags+" target_system:"+target_system+" target_component:"+target_component+" gimbal_id:"+gimbal_id+" client:"+client+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_STORM32_GIMBAL_MANAGER_CONTROL";
    }
}
        