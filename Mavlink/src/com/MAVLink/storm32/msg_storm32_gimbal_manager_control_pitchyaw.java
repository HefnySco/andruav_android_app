/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW PACKING
package com.MAVLink.storm32;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.messages.MAVLinkMessage;
import com.MAVLink.messages.MAVLinkPayload;
import com.MAVLink.messages.Units;
import com.MAVLink.messages.Description;

/**
 * Message to a gimbal manager to control the gimbal tilt and pan angles. Angles and rates can be set to NaN according to use case. A gimbal device is never to react to this message.
 */
public class msg_storm32_gimbal_manager_control_pitchyaw extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW = 60013;
    public static final int MAVLINK_MSG_LENGTH = 24;
    private static final long serialVersionUID = MAVLINK_MSG_ID_STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW;

    
    /**
     * Pitch/tilt angle (positive: tilt up, NaN to be ignored).
     */
    @Description("Pitch/tilt angle (positive: tilt up, NaN to be ignored).")
    @Units("rad")
    public float pitch;
    
    /**
     * Yaw/pan angle (positive: pan the right, the frame is determined by the STORM32_GIMBAL_DEVICE_FLAGS_YAW_ABSOLUTE flag, NaN to be ignored).
     */
    @Description("Yaw/pan angle (positive: pan the right, the frame is determined by the STORM32_GIMBAL_DEVICE_FLAGS_YAW_ABSOLUTE flag, NaN to be ignored).")
    @Units("rad")
    public float yaw;
    
    /**
     * Pitch/tilt angular rate (positive: tilt up, NaN to be ignored).
     */
    @Description("Pitch/tilt angular rate (positive: tilt up, NaN to be ignored).")
    @Units("rad/s")
    public float pitch_rate;
    
    /**
     * Yaw/pan angular rate (positive: pan to the right, the frame is determined by the STORM32_GIMBAL_DEVICE_FLAGS_YAW_ABSOLUTE flag, NaN to be ignored).
     */
    @Description("Yaw/pan angular rate (positive: pan to the right, the frame is determined by the STORM32_GIMBAL_DEVICE_FLAGS_YAW_ABSOLUTE flag, NaN to be ignored).")
    @Units("rad/s")
    public float yaw_rate;
    
    /**
     * Gimbal device flags (UINT16_MAX to be ignored).
     */
    @Description("Gimbal device flags (UINT16_MAX to be ignored).")
    @Units("")
    public int device_flags;
    
    /**
     * Gimbal manager flags (0 to be ignored).
     */
    @Description("Gimbal manager flags (0 to be ignored).")
    @Units("")
    public int manager_flags;
    
    /**
     * System ID
     */
    @Description("System ID")
    @Units("")
    public short target_system;
    
    /**
     * Component ID
     */
    @Description("Component ID")
    @Units("")
    public short target_component;
    
    /**
     * Gimbal ID of the gimbal manager to address (component ID or 1-6 for non-MAVLink gimbal, 0 for all gimbals, send command multiple times for more than one but not all gimbals).
     */
    @Description("Gimbal ID of the gimbal manager to address (component ID or 1-6 for non-MAVLink gimbal, 0 for all gimbals, send command multiple times for more than one but not all gimbals).")
    @Units("")
    public short gimbal_id;
    
    /**
     * Client which is contacting the gimbal manager (must be set).
     */
    @Description("Client which is contacting the gimbal manager (must be set).")
    @Units("")
    public short client;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW;

        packet.payload.putFloat(pitch);
        packet.payload.putFloat(yaw);
        packet.payload.putFloat(pitch_rate);
        packet.payload.putFloat(yaw_rate);
        packet.payload.putUnsignedShort(device_flags);
        packet.payload.putUnsignedShort(manager_flags);
        packet.payload.putUnsignedByte(target_system);
        packet.payload.putUnsignedByte(target_component);
        packet.payload.putUnsignedByte(gimbal_id);
        packet.payload.putUnsignedByte(client);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a storm32_gimbal_manager_control_pitchyaw message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.pitch = payload.getFloat();
        this.yaw = payload.getFloat();
        this.pitch_rate = payload.getFloat();
        this.yaw_rate = payload.getFloat();
        this.device_flags = payload.getUnsignedShort();
        this.manager_flags = payload.getUnsignedShort();
        this.target_system = payload.getUnsignedByte();
        this.target_component = payload.getUnsignedByte();
        this.gimbal_id = payload.getUnsignedByte();
        this.client = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_storm32_gimbal_manager_control_pitchyaw() {
        this.msgid = MAVLINK_MSG_ID_STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_storm32_gimbal_manager_control_pitchyaw( float pitch, float yaw, float pitch_rate, float yaw_rate, int device_flags, int manager_flags, short target_system, short target_component, short gimbal_id, short client) {
        this.msgid = MAVLINK_MSG_ID_STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW;

        this.pitch = pitch;
        this.yaw = yaw;
        this.pitch_rate = pitch_rate;
        this.yaw_rate = yaw_rate;
        this.device_flags = device_flags;
        this.manager_flags = manager_flags;
        this.target_system = target_system;
        this.target_component = target_component;
        this.gimbal_id = gimbal_id;
        this.client = client;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_storm32_gimbal_manager_control_pitchyaw( float pitch, float yaw, float pitch_rate, float yaw_rate, int device_flags, int manager_flags, short target_system, short target_component, short gimbal_id, short client, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.pitch = pitch;
        this.yaw = yaw;
        this.pitch_rate = pitch_rate;
        this.yaw_rate = yaw_rate;
        this.device_flags = device_flags;
        this.manager_flags = manager_flags;
        this.target_system = target_system;
        this.target_component = target_component;
        this.gimbal_id = gimbal_id;
        this.client = client;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_storm32_gimbal_manager_control_pitchyaw(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                        
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW - sysid:"+sysid+" compid:"+compid+" pitch:"+pitch+" yaw:"+yaw+" pitch_rate:"+pitch_rate+" yaw_rate:"+yaw_rate+" device_flags:"+device_flags+" manager_flags:"+manager_flags+" target_system:"+target_system+" target_component:"+target_component+" gimbal_id:"+gimbal_id+" client:"+client+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_STORM32_GIMBAL_MANAGER_CONTROL_PITCHYAW";
    }
}
        