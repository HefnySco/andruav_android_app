/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE AIRLINK_AUTH PACKING
package com.MAVLink.csAirLink;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * Authorization package
 */
public class msg_airlink_auth extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_AIRLINK_AUTH = 52000;
    public static final int MAVLINK_MSG_LENGTH = 100;
    private static final long serialVersionUID = MAVLINK_MSG_ID_AIRLINK_AUTH;

    
    /**
     * Login
     */
    @Description("Login")
    @Units("")
    public byte login[] = new byte[50];
    
    /**
     * Password
     */
    @Description("Password")
    @Units("")
    public byte password[] = new byte[50];
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_AIRLINK_AUTH;

        
        for (int i = 0; i < login.length; i++) {
            packet.payload.putByte(login[i]);
        }
                    
        
        for (int i = 0; i < password.length; i++) {
            packet.payload.putByte(password[i]);
        }
                    
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a airlink_auth message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        
        for (int i = 0; i < this.login.length; i++) {
            this.login[i] = payload.getByte();
        }
                
        
        for (int i = 0; i < this.password.length; i++) {
            this.password[i] = payload.getByte();
        }
                
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_airlink_auth() {
        this.msgid = MAVLINK_MSG_ID_AIRLINK_AUTH;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_airlink_auth( byte[] login, byte[] password) {
        this.msgid = MAVLINK_MSG_ID_AIRLINK_AUTH;

        this.login = login;
        this.password = password;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_airlink_auth( byte[] login, byte[] password, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_AIRLINK_AUTH;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.login = login;
        this.password = password;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_airlink_auth(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_AIRLINK_AUTH;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

     
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setLogin(String str) {
        int len = Math.min(str.length(), 50);
        for (int i=0; i<len; i++) {
            login[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<50; i++) {            // padding for the rest of the buffer
            login[i] = 0;
        }
    }

    /**
    * Gets the message, formatted as a string
    */
    public String getLogin() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 50; i++) {
            if (login[i] != 0)
                buf.append((char) login[i]);
            else
                break;
        }
        return buf.toString();

    }
                          
    /**
    * Sets the buffer of this message with a string, adds the necessary padding
    */
    public void setPassword(String str) {
        int len = Math.min(str.length(), 50);
        for (int i=0; i<len; i++) {
            password[i] = (byte) str.charAt(i);
        }

        for (int i=len; i<50; i++) {            // padding for the rest of the buffer
            password[i] = 0;
        }
    }

    /**
    * Gets the message, formatted as a string
    */
    public String getPassword() {
        StringBuffer buf = new StringBuffer();
        for (int i = 0; i < 50; i++) {
            if (password[i] != 0)
                buf.append((char) password[i]);
            else
                break;
        }
        return buf.toString();

    }
                         
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_AIRLINK_AUTH - sysid:"+sysid+" compid:"+compid+" login:"+login+" password:"+password+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_AIRLINK_AUTH";
    }
}
        