/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE ASLCTRL_DATA PACKING
package com.MAVLink.ASLUAV;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * ASL-fixed-wing controller data
 */
public class msg_aslctrl_data extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_ASLCTRL_DATA = 8004;
    public static final int MAVLINK_MSG_LENGTH = 98;
    private static final long serialVersionUID = MAVLINK_MSG_ID_ASLCTRL_DATA;

    
    /**
     *  Timestamp
     */
    @Description(" Timestamp")
    @Units("us")
    public long timestamp;
    
    /**
     *  See sourcecode for a description of these values... 
     */
    @Description(" See sourcecode for a description of these values... ")
    @Units("")
    public float h;
    
    /**
     *  
     */
    @Description(" ")
    @Units("")
    public float hRef;
    
    /**
     *  
     */
    @Description(" ")
    @Units("")
    public float hRef_t;
    
    /**
     * Pitch angle
     */
    @Description("Pitch angle")
    @Units("deg")
    public float PitchAngle;
    
    /**
     * Pitch angle reference
     */
    @Description("Pitch angle reference")
    @Units("deg")
    public float PitchAngleRef;
    
    /**
     *  
     */
    @Description(" ")
    @Units("")
    public float q;
    
    /**
     *  
     */
    @Description(" ")
    @Units("")
    public float qRef;
    
    /**
     *  
     */
    @Description(" ")
    @Units("")
    public float uElev;
    
    /**
     *  
     */
    @Description(" ")
    @Units("")
    public float uThrot;
    
    /**
     *  
     */
    @Description(" ")
    @Units("")
    public float uThrot2;
    
    /**
     *  
     */
    @Description(" ")
    @Units("")
    public float nZ;
    
    /**
     * Airspeed reference
     */
    @Description("Airspeed reference")
    @Units("m/s")
    public float AirspeedRef;
    
    /**
     * Yaw angle
     */
    @Description("Yaw angle")
    @Units("deg")
    public float YawAngle;
    
    /**
     * Yaw angle reference
     */
    @Description("Yaw angle reference")
    @Units("deg")
    public float YawAngleRef;
    
    /**
     * Roll angle
     */
    @Description("Roll angle")
    @Units("deg")
    public float RollAngle;
    
    /**
     * Roll angle reference
     */
    @Description("Roll angle reference")
    @Units("deg")
    public float RollAngleRef;
    
    /**
     *  
     */
    @Description(" ")
    @Units("")
    public float p;
    
    /**
     *  
     */
    @Description(" ")
    @Units("")
    public float pRef;
    
    /**
     *  
     */
    @Description(" ")
    @Units("")
    public float r;
    
    /**
     *  
     */
    @Description(" ")
    @Units("")
    public float rRef;
    
    /**
     *  
     */
    @Description(" ")
    @Units("")
    public float uAil;
    
    /**
     *  
     */
    @Description(" ")
    @Units("")
    public float uRud;
    
    /**
     *  ASLCTRL control-mode (manual, stabilized, auto, etc...)
     */
    @Description(" ASLCTRL control-mode (manual, stabilized, auto, etc...)")
    @Units("")
    public short aslctrl_mode;
    
    /**
     *  
     */
    @Description(" ")
    @Units("")
    public short SpoilersEngaged;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_ASLCTRL_DATA;

        packet.payload.putUnsignedLong(timestamp);
        packet.payload.putFloat(h);
        packet.payload.putFloat(hRef);
        packet.payload.putFloat(hRef_t);
        packet.payload.putFloat(PitchAngle);
        packet.payload.putFloat(PitchAngleRef);
        packet.payload.putFloat(q);
        packet.payload.putFloat(qRef);
        packet.payload.putFloat(uElev);
        packet.payload.putFloat(uThrot);
        packet.payload.putFloat(uThrot2);
        packet.payload.putFloat(nZ);
        packet.payload.putFloat(AirspeedRef);
        packet.payload.putFloat(YawAngle);
        packet.payload.putFloat(YawAngleRef);
        packet.payload.putFloat(RollAngle);
        packet.payload.putFloat(RollAngleRef);
        packet.payload.putFloat(p);
        packet.payload.putFloat(pRef);
        packet.payload.putFloat(r);
        packet.payload.putFloat(rRef);
        packet.payload.putFloat(uAil);
        packet.payload.putFloat(uRud);
        packet.payload.putUnsignedByte(aslctrl_mode);
        packet.payload.putUnsignedByte(SpoilersEngaged);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a aslctrl_data message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.timestamp = payload.getUnsignedLong();
        this.h = payload.getFloat();
        this.hRef = payload.getFloat();
        this.hRef_t = payload.getFloat();
        this.PitchAngle = payload.getFloat();
        this.PitchAngleRef = payload.getFloat();
        this.q = payload.getFloat();
        this.qRef = payload.getFloat();
        this.uElev = payload.getFloat();
        this.uThrot = payload.getFloat();
        this.uThrot2 = payload.getFloat();
        this.nZ = payload.getFloat();
        this.AirspeedRef = payload.getFloat();
        this.YawAngle = payload.getFloat();
        this.YawAngleRef = payload.getFloat();
        this.RollAngle = payload.getFloat();
        this.RollAngleRef = payload.getFloat();
        this.p = payload.getFloat();
        this.pRef = payload.getFloat();
        this.r = payload.getFloat();
        this.rRef = payload.getFloat();
        this.uAil = payload.getFloat();
        this.uRud = payload.getFloat();
        this.aslctrl_mode = payload.getUnsignedByte();
        this.SpoilersEngaged = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_aslctrl_data() {
        this.msgid = MAVLINK_MSG_ID_ASLCTRL_DATA;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_aslctrl_data( long timestamp, float h, float hRef, float hRef_t, float PitchAngle, float PitchAngleRef, float q, float qRef, float uElev, float uThrot, float uThrot2, float nZ, float AirspeedRef, float YawAngle, float YawAngleRef, float RollAngle, float RollAngleRef, float p, float pRef, float r, float rRef, float uAil, float uRud, short aslctrl_mode, short SpoilersEngaged) {
        this.msgid = MAVLINK_MSG_ID_ASLCTRL_DATA;

        this.timestamp = timestamp;
        this.h = h;
        this.hRef = hRef;
        this.hRef_t = hRef_t;
        this.PitchAngle = PitchAngle;
        this.PitchAngleRef = PitchAngleRef;
        this.q = q;
        this.qRef = qRef;
        this.uElev = uElev;
        this.uThrot = uThrot;
        this.uThrot2 = uThrot2;
        this.nZ = nZ;
        this.AirspeedRef = AirspeedRef;
        this.YawAngle = YawAngle;
        this.YawAngleRef = YawAngleRef;
        this.RollAngle = RollAngle;
        this.RollAngleRef = RollAngleRef;
        this.p = p;
        this.pRef = pRef;
        this.r = r;
        this.rRef = rRef;
        this.uAil = uAil;
        this.uRud = uRud;
        this.aslctrl_mode = aslctrl_mode;
        this.SpoilersEngaged = SpoilersEngaged;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_aslctrl_data( long timestamp, float h, float hRef, float hRef_t, float PitchAngle, float PitchAngleRef, float q, float qRef, float uElev, float uThrot, float uThrot2, float nZ, float AirspeedRef, float YawAngle, float YawAngleRef, float RollAngle, float RollAngleRef, float p, float pRef, float r, float rRef, float uAil, float uRud, short aslctrl_mode, short SpoilersEngaged, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_ASLCTRL_DATA;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.timestamp = timestamp;
        this.h = h;
        this.hRef = hRef;
        this.hRef_t = hRef_t;
        this.PitchAngle = PitchAngle;
        this.PitchAngleRef = PitchAngleRef;
        this.q = q;
        this.qRef = qRef;
        this.uElev = uElev;
        this.uThrot = uThrot;
        this.uThrot2 = uThrot2;
        this.nZ = nZ;
        this.AirspeedRef = AirspeedRef;
        this.YawAngle = YawAngle;
        this.YawAngleRef = YawAngleRef;
        this.RollAngle = RollAngle;
        this.RollAngleRef = RollAngleRef;
        this.p = p;
        this.pRef = pRef;
        this.r = r;
        this.rRef = rRef;
        this.uAil = uAil;
        this.uRud = uRud;
        this.aslctrl_mode = aslctrl_mode;
        this.SpoilersEngaged = SpoilersEngaged;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_aslctrl_data(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_ASLCTRL_DATA;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                                                      
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_ASLCTRL_DATA - sysid:"+sysid+" compid:"+compid+" timestamp:"+timestamp+" h:"+h+" hRef:"+hRef+" hRef_t:"+hRef_t+" PitchAngle:"+PitchAngle+" PitchAngleRef:"+PitchAngleRef+" q:"+q+" qRef:"+qRef+" uElev:"+uElev+" uThrot:"+uThrot+" uThrot2:"+uThrot2+" nZ:"+nZ+" AirspeedRef:"+AirspeedRef+" YawAngle:"+YawAngle+" YawAngleRef:"+YawAngleRef+" RollAngle:"+RollAngle+" RollAngleRef:"+RollAngleRef+" p:"+p+" pRef:"+pRef+" r:"+r+" rRef:"+rRef+" uAil:"+uAil+" uRud:"+uRud+" aslctrl_mode:"+aslctrl_mode+" SpoilersEngaged:"+SpoilersEngaged+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_ASLCTRL_DATA";
    }
}
        