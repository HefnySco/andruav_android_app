/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE ASL_OBCTRL PACKING
package com.MAVLink.ASLUAV;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * Off-board controls/commands for ASLUAVs
 */
public class msg_asl_obctrl extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_ASL_OBCTRL = 8008;
    public static final int MAVLINK_MSG_LENGTH = 33;
    private static final long serialVersionUID = MAVLINK_MSG_ID_ASL_OBCTRL;

    
    /**
     *  Time since system start
     */
    @Description(" Time since system start")
    @Units("us")
    public long timestamp;
    
    /**
     *  Elevator command [~]
     */
    @Description(" Elevator command [~]")
    @Units("")
    public float uElev;
    
    /**
     *  Throttle command [~]
     */
    @Description(" Throttle command [~]")
    @Units("")
    public float uThrot;
    
    /**
     *  Throttle 2 command [~]
     */
    @Description(" Throttle 2 command [~]")
    @Units("")
    public float uThrot2;
    
    /**
     *  Left aileron command [~]
     */
    @Description(" Left aileron command [~]")
    @Units("")
    public float uAilL;
    
    /**
     *  Right aileron command [~]
     */
    @Description(" Right aileron command [~]")
    @Units("")
    public float uAilR;
    
    /**
     *  Rudder command [~]
     */
    @Description(" Rudder command [~]")
    @Units("")
    public float uRud;
    
    /**
     *  Off-board computer status
     */
    @Description(" Off-board computer status")
    @Units("")
    public short obctrl_status;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_ASL_OBCTRL;

        packet.payload.putUnsignedLong(timestamp);
        packet.payload.putFloat(uElev);
        packet.payload.putFloat(uThrot);
        packet.payload.putFloat(uThrot2);
        packet.payload.putFloat(uAilL);
        packet.payload.putFloat(uAilR);
        packet.payload.putFloat(uRud);
        packet.payload.putUnsignedByte(obctrl_status);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a asl_obctrl message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.timestamp = payload.getUnsignedLong();
        this.uElev = payload.getFloat();
        this.uThrot = payload.getFloat();
        this.uThrot2 = payload.getFloat();
        this.uAilL = payload.getFloat();
        this.uAilR = payload.getFloat();
        this.uRud = payload.getFloat();
        this.obctrl_status = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_asl_obctrl() {
        this.msgid = MAVLINK_MSG_ID_ASL_OBCTRL;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_asl_obctrl( long timestamp, float uElev, float uThrot, float uThrot2, float uAilL, float uAilR, float uRud, short obctrl_status) {
        this.msgid = MAVLINK_MSG_ID_ASL_OBCTRL;

        this.timestamp = timestamp;
        this.uElev = uElev;
        this.uThrot = uThrot;
        this.uThrot2 = uThrot2;
        this.uAilL = uAilL;
        this.uAilR = uAilR;
        this.uRud = uRud;
        this.obctrl_status = obctrl_status;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_asl_obctrl( long timestamp, float uElev, float uThrot, float uThrot2, float uAilL, float uAilR, float uRud, short obctrl_status, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_ASL_OBCTRL;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.timestamp = timestamp;
        this.uElev = uElev;
        this.uThrot = uThrot;
        this.uThrot2 = uThrot2;
        this.uAilL = uAilL;
        this.uAilR = uAilR;
        this.uRud = uRud;
        this.obctrl_status = obctrl_status;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_asl_obctrl(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_ASL_OBCTRL;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                    
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_ASL_OBCTRL - sysid:"+sysid+" compid:"+compid+" timestamp:"+timestamp+" uElev:"+uElev+" uThrot:"+uThrot+" uThrot2:"+uThrot2+" uAilL:"+uAilL+" uAilR:"+uAilR+" uRud:"+uRud+" obctrl_status:"+obctrl_status+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_ASL_OBCTRL";
    }
}
        