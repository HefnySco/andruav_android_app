/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE SENS_MPPT PACKING
package com.MAVLink.ASLUAV;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * Maximum Power Point Tracker (MPPT) sensor data for solar module power performance tracking
 */
public class msg_sens_mppt extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_SENS_MPPT = 8003;
    public static final int MAVLINK_MSG_LENGTH = 41;
    private static final long serialVersionUID = MAVLINK_MSG_ID_SENS_MPPT;

    
    /**
     *  MPPT last timestamp 
     */
    @Description(" MPPT last timestamp ")
    @Units("us")
    public long mppt_timestamp;
    
    /**
     *  MPPT1 voltage 
     */
    @Description(" MPPT1 voltage ")
    @Units("V")
    public float mppt1_volt;
    
    /**
     *  MPPT1 current 
     */
    @Description(" MPPT1 current ")
    @Units("A")
    public float mppt1_amp;
    
    /**
     *  MPPT2 voltage 
     */
    @Description(" MPPT2 voltage ")
    @Units("V")
    public float mppt2_volt;
    
    /**
     *  MPPT2 current 
     */
    @Description(" MPPT2 current ")
    @Units("A")
    public float mppt2_amp;
    
    /**
     * MPPT3 voltage 
     */
    @Description("MPPT3 voltage ")
    @Units("V")
    public float mppt3_volt;
    
    /**
     *  MPPT3 current 
     */
    @Description(" MPPT3 current ")
    @Units("A")
    public float mppt3_amp;
    
    /**
     *  MPPT1 pwm 
     */
    @Description(" MPPT1 pwm ")
    @Units("us")
    public int mppt1_pwm;
    
    /**
     *  MPPT2 pwm 
     */
    @Description(" MPPT2 pwm ")
    @Units("us")
    public int mppt2_pwm;
    
    /**
     *  MPPT3 pwm 
     */
    @Description(" MPPT3 pwm ")
    @Units("us")
    public int mppt3_pwm;
    
    /**
     *  MPPT1 status 
     */
    @Description(" MPPT1 status ")
    @Units("")
    public short mppt1_status;
    
    /**
     *  MPPT2 status 
     */
    @Description(" MPPT2 status ")
    @Units("")
    public short mppt2_status;
    
    /**
     *  MPPT3 status 
     */
    @Description(" MPPT3 status ")
    @Units("")
    public short mppt3_status;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_SENS_MPPT;

        packet.payload.putUnsignedLong(mppt_timestamp);
        packet.payload.putFloat(mppt1_volt);
        packet.payload.putFloat(mppt1_amp);
        packet.payload.putFloat(mppt2_volt);
        packet.payload.putFloat(mppt2_amp);
        packet.payload.putFloat(mppt3_volt);
        packet.payload.putFloat(mppt3_amp);
        packet.payload.putUnsignedShort(mppt1_pwm);
        packet.payload.putUnsignedShort(mppt2_pwm);
        packet.payload.putUnsignedShort(mppt3_pwm);
        packet.payload.putUnsignedByte(mppt1_status);
        packet.payload.putUnsignedByte(mppt2_status);
        packet.payload.putUnsignedByte(mppt3_status);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a sens_mppt message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.mppt_timestamp = payload.getUnsignedLong();
        this.mppt1_volt = payload.getFloat();
        this.mppt1_amp = payload.getFloat();
        this.mppt2_volt = payload.getFloat();
        this.mppt2_amp = payload.getFloat();
        this.mppt3_volt = payload.getFloat();
        this.mppt3_amp = payload.getFloat();
        this.mppt1_pwm = payload.getUnsignedShort();
        this.mppt2_pwm = payload.getUnsignedShort();
        this.mppt3_pwm = payload.getUnsignedShort();
        this.mppt1_status = payload.getUnsignedByte();
        this.mppt2_status = payload.getUnsignedByte();
        this.mppt3_status = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_sens_mppt() {
        this.msgid = MAVLINK_MSG_ID_SENS_MPPT;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_sens_mppt( long mppt_timestamp, float mppt1_volt, float mppt1_amp, float mppt2_volt, float mppt2_amp, float mppt3_volt, float mppt3_amp, int mppt1_pwm, int mppt2_pwm, int mppt3_pwm, short mppt1_status, short mppt2_status, short mppt3_status) {
        this.msgid = MAVLINK_MSG_ID_SENS_MPPT;

        this.mppt_timestamp = mppt_timestamp;
        this.mppt1_volt = mppt1_volt;
        this.mppt1_amp = mppt1_amp;
        this.mppt2_volt = mppt2_volt;
        this.mppt2_amp = mppt2_amp;
        this.mppt3_volt = mppt3_volt;
        this.mppt3_amp = mppt3_amp;
        this.mppt1_pwm = mppt1_pwm;
        this.mppt2_pwm = mppt2_pwm;
        this.mppt3_pwm = mppt3_pwm;
        this.mppt1_status = mppt1_status;
        this.mppt2_status = mppt2_status;
        this.mppt3_status = mppt3_status;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_sens_mppt( long mppt_timestamp, float mppt1_volt, float mppt1_amp, float mppt2_volt, float mppt2_amp, float mppt3_volt, float mppt3_amp, int mppt1_pwm, int mppt2_pwm, int mppt3_pwm, short mppt1_status, short mppt2_status, short mppt3_status, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_SENS_MPPT;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.mppt_timestamp = mppt_timestamp;
        this.mppt1_volt = mppt1_volt;
        this.mppt1_amp = mppt1_amp;
        this.mppt2_volt = mppt2_volt;
        this.mppt2_amp = mppt2_amp;
        this.mppt3_volt = mppt3_volt;
        this.mppt3_amp = mppt3_amp;
        this.mppt1_pwm = mppt1_pwm;
        this.mppt2_pwm = mppt2_pwm;
        this.mppt3_pwm = mppt3_pwm;
        this.mppt1_status = mppt1_status;
        this.mppt2_status = mppt2_status;
        this.mppt3_status = mppt3_status;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_sens_mppt(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_SENS_MPPT;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                              
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_SENS_MPPT - sysid:"+sysid+" compid:"+compid+" mppt_timestamp:"+mppt_timestamp+" mppt1_volt:"+mppt1_volt+" mppt1_amp:"+mppt1_amp+" mppt2_volt:"+mppt2_volt+" mppt2_amp:"+mppt2_amp+" mppt3_volt:"+mppt3_volt+" mppt3_amp:"+mppt3_amp+" mppt1_pwm:"+mppt1_pwm+" mppt2_pwm:"+mppt2_pwm+" mppt3_pwm:"+mppt3_pwm+" mppt1_status:"+mppt1_status+" mppt2_status:"+mppt2_status+" mppt3_status:"+mppt3_status+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_SENS_MPPT";
    }
}
        