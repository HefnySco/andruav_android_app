/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE DIGICAM_CONFIGURE PACKING
package com.MAVLink.ardupilotmega;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * Configure on-board Camera Control System.
 */
public class msg_digicam_configure extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_DIGICAM_CONFIGURE = 154;
    public static final int MAVLINK_MSG_LENGTH = 15;
    private static final long serialVersionUID = MAVLINK_MSG_ID_DIGICAM_CONFIGURE;

    
    /**
     * Correspondent value to given extra_param.
     */
    @Description("Correspondent value to given extra_param.")
    @Units("")
    public float extra_value;
    
    /**
     * Divisor number //e.g. 1000 means 1/1000 (0 means ignore).
     */
    @Description("Divisor number //e.g. 1000 means 1/1000 (0 means ignore).")
    @Units("")
    public int shutter_speed;
    
    /**
     * System ID.
     */
    @Description("System ID.")
    @Units("")
    public short target_system;
    
    /**
     * Component ID.
     */
    @Description("Component ID.")
    @Units("")
    public short target_component;
    
    /**
     * Mode enumeration from 1 to N //P, TV, AV, M, etc. (0 means ignore).
     */
    @Description("Mode enumeration from 1 to N //P, TV, AV, M, etc. (0 means ignore).")
    @Units("")
    public short mode;
    
    /**
     * F stop number x 10 //e.g. 28 means 2.8 (0 means ignore).
     */
    @Description("F stop number x 10 //e.g. 28 means 2.8 (0 means ignore).")
    @Units("")
    public short aperture;
    
    /**
     * ISO enumeration from 1 to N //e.g. 80, 100, 200, Etc (0 means ignore).
     */
    @Description("ISO enumeration from 1 to N //e.g. 80, 100, 200, Etc (0 means ignore).")
    @Units("")
    public short iso;
    
    /**
     * Exposure type enumeration from 1 to N (0 means ignore).
     */
    @Description("Exposure type enumeration from 1 to N (0 means ignore).")
    @Units("")
    public short exposure_type;
    
    /**
     * Command Identity (incremental loop: 0 to 255). //A command sent multiple times will be executed or pooled just once.
     */
    @Description("Command Identity (incremental loop: 0 to 255). //A command sent multiple times will be executed or pooled just once.")
    @Units("")
    public short command_id;
    
    /**
     * Main engine cut-off time before camera trigger (0 means no cut-off).
     */
    @Description("Main engine cut-off time before camera trigger (0 means no cut-off).")
    @Units("ds")
    public short engine_cut_off;
    
    /**
     * Extra parameters enumeration (0 means ignore).
     */
    @Description("Extra parameters enumeration (0 means ignore).")
    @Units("")
    public short extra_param;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_DIGICAM_CONFIGURE;

        packet.payload.putFloat(extra_value);
        packet.payload.putUnsignedShort(shutter_speed);
        packet.payload.putUnsignedByte(target_system);
        packet.payload.putUnsignedByte(target_component);
        packet.payload.putUnsignedByte(mode);
        packet.payload.putUnsignedByte(aperture);
        packet.payload.putUnsignedByte(iso);
        packet.payload.putUnsignedByte(exposure_type);
        packet.payload.putUnsignedByte(command_id);
        packet.payload.putUnsignedByte(engine_cut_off);
        packet.payload.putUnsignedByte(extra_param);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a digicam_configure message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.extra_value = payload.getFloat();
        this.shutter_speed = payload.getUnsignedShort();
        this.target_system = payload.getUnsignedByte();
        this.target_component = payload.getUnsignedByte();
        this.mode = payload.getUnsignedByte();
        this.aperture = payload.getUnsignedByte();
        this.iso = payload.getUnsignedByte();
        this.exposure_type = payload.getUnsignedByte();
        this.command_id = payload.getUnsignedByte();
        this.engine_cut_off = payload.getUnsignedByte();
        this.extra_param = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_digicam_configure() {
        this.msgid = MAVLINK_MSG_ID_DIGICAM_CONFIGURE;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_digicam_configure( float extra_value, int shutter_speed, short target_system, short target_component, short mode, short aperture, short iso, short exposure_type, short command_id, short engine_cut_off, short extra_param) {
        this.msgid = MAVLINK_MSG_ID_DIGICAM_CONFIGURE;

        this.extra_value = extra_value;
        this.shutter_speed = shutter_speed;
        this.target_system = target_system;
        this.target_component = target_component;
        this.mode = mode;
        this.aperture = aperture;
        this.iso = iso;
        this.exposure_type = exposure_type;
        this.command_id = command_id;
        this.engine_cut_off = engine_cut_off;
        this.extra_param = extra_param;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_digicam_configure( float extra_value, int shutter_speed, short target_system, short target_component, short mode, short aperture, short iso, short exposure_type, short command_id, short engine_cut_off, short extra_param, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_DIGICAM_CONFIGURE;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.extra_value = extra_value;
        this.shutter_speed = shutter_speed;
        this.target_system = target_system;
        this.target_component = target_component;
        this.mode = mode;
        this.aperture = aperture;
        this.iso = iso;
        this.exposure_type = exposure_type;
        this.command_id = command_id;
        this.engine_cut_off = engine_cut_off;
        this.extra_param = extra_param;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_digicam_configure(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_DIGICAM_CONFIGURE;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                          
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_DIGICAM_CONFIGURE - sysid:"+sysid+" compid:"+compid+" extra_value:"+extra_value+" shutter_speed:"+shutter_speed+" target_system:"+target_system+" target_component:"+target_component+" mode:"+mode+" aperture:"+aperture+" iso:"+iso+" exposure_type:"+exposure_type+" command_id:"+command_id+" engine_cut_off:"+engine_cut_off+" extra_param:"+extra_param+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_DIGICAM_CONFIGURE";
    }
}
        