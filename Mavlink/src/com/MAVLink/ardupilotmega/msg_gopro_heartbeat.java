/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE GOPRO_HEARTBEAT PACKING
package com.MAVLink.ardupilotmega;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * Heartbeat from a HeroBus attached GoPro.
 */
public class msg_gopro_heartbeat extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_GOPRO_HEARTBEAT = 215;
    public static final int MAVLINK_MSG_LENGTH = 3;
    private static final long serialVersionUID = MAVLINK_MSG_ID_GOPRO_HEARTBEAT;

    
    /**
     * Status.
     */
    @Description("Status.")
    @Units("")
    public short status;
    
    /**
     * Current capture mode.
     */
    @Description("Current capture mode.")
    @Units("")
    public short capture_mode;
    
    /**
     * Additional status bits.
     */
    @Description("Additional status bits.")
    @Units("")
    public short flags;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_GOPRO_HEARTBEAT;

        packet.payload.putUnsignedByte(status);
        packet.payload.putUnsignedByte(capture_mode);
        packet.payload.putUnsignedByte(flags);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a gopro_heartbeat message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.status = payload.getUnsignedByte();
        this.capture_mode = payload.getUnsignedByte();
        this.flags = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_gopro_heartbeat() {
        this.msgid = MAVLINK_MSG_ID_GOPRO_HEARTBEAT;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_gopro_heartbeat( short status, short capture_mode, short flags) {
        this.msgid = MAVLINK_MSG_ID_GOPRO_HEARTBEAT;

        this.status = status;
        this.capture_mode = capture_mode;
        this.flags = flags;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_gopro_heartbeat( short status, short capture_mode, short flags, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_GOPRO_HEARTBEAT;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.status = status;
        this.capture_mode = capture_mode;
        this.flags = flags;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_gopro_heartbeat(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_GOPRO_HEARTBEAT;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

          
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_GOPRO_HEARTBEAT - sysid:"+sysid+" compid:"+compid+" status:"+status+" capture_mode:"+capture_mode+" flags:"+flags+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_GOPRO_HEARTBEAT";
    }
}
        