/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE CUBEPILOT_RAW_RC PACKING
package com.MAVLink.cubepilot;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * Raw RC Data
 */
public class msg_cubepilot_raw_rc extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_CUBEPILOT_RAW_RC = 50001;
    public static final int MAVLINK_MSG_LENGTH = 32;
    private static final long serialVersionUID = MAVLINK_MSG_ID_CUBEPILOT_RAW_RC;

    
    /**
     * 
     */
    @Description("")
    @Units("")
    public short rc_raw[] = new short[32];
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_CUBEPILOT_RAW_RC;

        
        for (int i = 0; i < rc_raw.length; i++) {
            packet.payload.putUnsignedByte(rc_raw[i]);
        }
                    
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a cubepilot_raw_rc message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        
        for (int i = 0; i < this.rc_raw.length; i++) {
            this.rc_raw[i] = payload.getUnsignedByte();
        }
                
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_cubepilot_raw_rc() {
        this.msgid = MAVLINK_MSG_ID_CUBEPILOT_RAW_RC;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_cubepilot_raw_rc( short[] rc_raw) {
        this.msgid = MAVLINK_MSG_ID_CUBEPILOT_RAW_RC;

        this.rc_raw = rc_raw;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_cubepilot_raw_rc( short[] rc_raw, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_CUBEPILOT_RAW_RC;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.rc_raw = rc_raw;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_cubepilot_raw_rc(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_CUBEPILOT_RAW_RC;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

      
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_CUBEPILOT_RAW_RC - sysid:"+sysid+" compid:"+compid+" rc_raw:"+rc_raw+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_CUBEPILOT_RAW_RC";
    }
}
        