/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE LOWEHEISER_GOV_EFI PACKING
package com.MAVLink.loweheiser;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;
import com.MAVLink.Messages.Units;
import com.MAVLink.Messages.Description;

/**
 * Composite EFI and Governor data from Loweheiser equipment.  This message is created by the EFI unit based on its own data and data received from a governor attached to that EFI unit.
 */
public class msg_loweheiser_gov_efi extends MAVLinkMessage {

    public static final int MAVLINK_MSG_ID_LOWEHEISER_GOV_EFI = 10151;
    public static final int MAVLINK_MSG_LENGTH = 85;
    private static final long serialVersionUID = MAVLINK_MSG_ID_LOWEHEISER_GOV_EFI;

    
    /**
     * Generator Battery voltage.
     */
    @Description("Generator Battery voltage.")
    @Units("V")
    public float volt_batt;
    
    /**
     * Generator Battery current.
     */
    @Description("Generator Battery current.")
    @Units("A")
    public float curr_batt;
    
    /**
     * Current being produced by generator.
     */
    @Description("Current being produced by generator.")
    @Units("A")
    public float curr_gen;
    
    /**
     * Load current being consumed by the UAV (sum of curr_gen and curr_batt)
     */
    @Description("Load current being consumed by the UAV (sum of curr_gen and curr_batt)")
    @Units("A")
    public float curr_rot;
    
    /**
     * Generator fuel remaining in litres.
     */
    @Description("Generator fuel remaining in litres.")
    @Units("l")
    public float fuel_level;
    
    /**
     * Throttle Output.
     */
    @Description("Throttle Output.")
    @Units("%")
    public float throttle;
    
    /**
     * Seconds this generator has run since it was rebooted.
     */
    @Description("Seconds this generator has run since it was rebooted.")
    @Units("s")
    public long runtime;
    
    /**
     * Seconds until this generator requires maintenance.  A negative value indicates maintenance is past due.
     */
    @Description("Seconds until this generator requires maintenance.  A negative value indicates maintenance is past due.")
    @Units("s")
    public int until_maintenance;
    
    /**
     * The Temperature of the rectifier.
     */
    @Description("The Temperature of the rectifier.")
    @Units("degC")
    public float rectifier_temp;
    
    /**
     * The temperature of the mechanical motor, fuel cell core or generator.
     */
    @Description("The temperature of the mechanical motor, fuel cell core or generator.")
    @Units("degC")
    public float generator_temp;
    
    /**
     *  EFI Supply Voltage.
     */
    @Description(" EFI Supply Voltage.")
    @Units("V")
    public float efi_batt;
    
    /**
     * Motor RPM.
     */
    @Description("Motor RPM.")
    @Units("rpm")
    public float efi_rpm;
    
    /**
     * Injector pulse-width in miliseconds.
     */
    @Description("Injector pulse-width in miliseconds.")
    @Units("ms")
    public float efi_pw;
    
    /**
     * Fuel flow rate in litres/hour.
     */
    @Description("Fuel flow rate in litres/hour.")
    @Units("")
    public float efi_fuel_flow;
    
    /**
     * Fuel consumed.
     */
    @Description("Fuel consumed.")
    @Units("l")
    public float efi_fuel_consumed;
    
    /**
     * Atmospheric pressure.
     */
    @Description("Atmospheric pressure.")
    @Units("kPa")
    public float efi_baro;
    
    /**
     * Manifold Air Temperature.
     */
    @Description("Manifold Air Temperature.")
    @Units("degC")
    public float efi_mat;
    
    /**
     * Cylinder Head Temperature.
     */
    @Description("Cylinder Head Temperature.")
    @Units("degC")
    public float efi_clt;
    
    /**
     * Throttle Position.
     */
    @Description("Throttle Position.")
    @Units("%")
    public float efi_tps;
    
    /**
     * Exhaust gas temperature.
     */
    @Description("Exhaust gas temperature.")
    @Units("degC")
    public float efi_exhaust_gas_temperature;
    
    /**
     * Generator status.
     */
    @Description("Generator status.")
    @Units("")
    public int generator_status;
    
    /**
     * EFI status.
     */
    @Description("EFI status.")
    @Units("")
    public int efi_status;
    
    /**
     * EFI index.
     */
    @Description("EFI index.")
    @Units("")
    public short efi_index;
    

    /**
     * Generates the payload for a mavlink message for a message of this type
     * @return
     */
    @Override
    public MAVLinkPacket pack() {
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH,isMavlink2);
        packet.sysid = sysid;
        packet.compid = compid;
        packet.msgid = MAVLINK_MSG_ID_LOWEHEISER_GOV_EFI;

        packet.payload.putFloat(volt_batt);
        packet.payload.putFloat(curr_batt);
        packet.payload.putFloat(curr_gen);
        packet.payload.putFloat(curr_rot);
        packet.payload.putFloat(fuel_level);
        packet.payload.putFloat(throttle);
        packet.payload.putUnsignedInt(runtime);
        packet.payload.putInt(until_maintenance);
        packet.payload.putFloat(rectifier_temp);
        packet.payload.putFloat(generator_temp);
        packet.payload.putFloat(efi_batt);
        packet.payload.putFloat(efi_rpm);
        packet.payload.putFloat(efi_pw);
        packet.payload.putFloat(efi_fuel_flow);
        packet.payload.putFloat(efi_fuel_consumed);
        packet.payload.putFloat(efi_baro);
        packet.payload.putFloat(efi_mat);
        packet.payload.putFloat(efi_clt);
        packet.payload.putFloat(efi_tps);
        packet.payload.putFloat(efi_exhaust_gas_temperature);
        packet.payload.putUnsignedShort(generator_status);
        packet.payload.putUnsignedShort(efi_status);
        packet.payload.putUnsignedByte(efi_index);
        
        if (isMavlink2) {
            
        }
        return packet;
    }

    /**
     * Decode a loweheiser_gov_efi message into this class fields
     *
     * @param payload The message to decode
     */
    @Override
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();

        this.volt_batt = payload.getFloat();
        this.curr_batt = payload.getFloat();
        this.curr_gen = payload.getFloat();
        this.curr_rot = payload.getFloat();
        this.fuel_level = payload.getFloat();
        this.throttle = payload.getFloat();
        this.runtime = payload.getUnsignedInt();
        this.until_maintenance = payload.getInt();
        this.rectifier_temp = payload.getFloat();
        this.generator_temp = payload.getFloat();
        this.efi_batt = payload.getFloat();
        this.efi_rpm = payload.getFloat();
        this.efi_pw = payload.getFloat();
        this.efi_fuel_flow = payload.getFloat();
        this.efi_fuel_consumed = payload.getFloat();
        this.efi_baro = payload.getFloat();
        this.efi_mat = payload.getFloat();
        this.efi_clt = payload.getFloat();
        this.efi_tps = payload.getFloat();
        this.efi_exhaust_gas_temperature = payload.getFloat();
        this.generator_status = payload.getUnsignedShort();
        this.efi_status = payload.getUnsignedShort();
        this.efi_index = payload.getUnsignedByte();
        
        if (isMavlink2) {
            
        }
    }

    /**
     * Constructor for a new message, just initializes the msgid
     */
    public msg_loweheiser_gov_efi() {
        this.msgid = MAVLINK_MSG_ID_LOWEHEISER_GOV_EFI;
    }

    /**
     * Constructor for a new message, initializes msgid and all payload variables
     */
    public msg_loweheiser_gov_efi( float volt_batt, float curr_batt, float curr_gen, float curr_rot, float fuel_level, float throttle, long runtime, int until_maintenance, float rectifier_temp, float generator_temp, float efi_batt, float efi_rpm, float efi_pw, float efi_fuel_flow, float efi_fuel_consumed, float efi_baro, float efi_mat, float efi_clt, float efi_tps, float efi_exhaust_gas_temperature, int generator_status, int efi_status, short efi_index) {
        this.msgid = MAVLINK_MSG_ID_LOWEHEISER_GOV_EFI;

        this.volt_batt = volt_batt;
        this.curr_batt = curr_batt;
        this.curr_gen = curr_gen;
        this.curr_rot = curr_rot;
        this.fuel_level = fuel_level;
        this.throttle = throttle;
        this.runtime = runtime;
        this.until_maintenance = until_maintenance;
        this.rectifier_temp = rectifier_temp;
        this.generator_temp = generator_temp;
        this.efi_batt = efi_batt;
        this.efi_rpm = efi_rpm;
        this.efi_pw = efi_pw;
        this.efi_fuel_flow = efi_fuel_flow;
        this.efi_fuel_consumed = efi_fuel_consumed;
        this.efi_baro = efi_baro;
        this.efi_mat = efi_mat;
        this.efi_clt = efi_clt;
        this.efi_tps = efi_tps;
        this.efi_exhaust_gas_temperature = efi_exhaust_gas_temperature;
        this.generator_status = generator_status;
        this.efi_status = efi_status;
        this.efi_index = efi_index;
        
    }

    /**
     * Constructor for a new message, initializes everything
     */
    public msg_loweheiser_gov_efi( float volt_batt, float curr_batt, float curr_gen, float curr_rot, float fuel_level, float throttle, long runtime, int until_maintenance, float rectifier_temp, float generator_temp, float efi_batt, float efi_rpm, float efi_pw, float efi_fuel_flow, float efi_fuel_consumed, float efi_baro, float efi_mat, float efi_clt, float efi_tps, float efi_exhaust_gas_temperature, int generator_status, int efi_status, short efi_index, int sysid, int compid, boolean isMavlink2) {
        this.msgid = MAVLINK_MSG_ID_LOWEHEISER_GOV_EFI;
        this.sysid = sysid;
        this.compid = compid;
        this.isMavlink2 = isMavlink2;

        this.volt_batt = volt_batt;
        this.curr_batt = curr_batt;
        this.curr_gen = curr_gen;
        this.curr_rot = curr_rot;
        this.fuel_level = fuel_level;
        this.throttle = throttle;
        this.runtime = runtime;
        this.until_maintenance = until_maintenance;
        this.rectifier_temp = rectifier_temp;
        this.generator_temp = generator_temp;
        this.efi_batt = efi_batt;
        this.efi_rpm = efi_rpm;
        this.efi_pw = efi_pw;
        this.efi_fuel_flow = efi_fuel_flow;
        this.efi_fuel_consumed = efi_fuel_consumed;
        this.efi_baro = efi_baro;
        this.efi_mat = efi_mat;
        this.efi_clt = efi_clt;
        this.efi_tps = efi_tps;
        this.efi_exhaust_gas_temperature = efi_exhaust_gas_temperature;
        this.generator_status = generator_status;
        this.efi_status = efi_status;
        this.efi_index = efi_index;
        
    }

    /**
     * Constructor for a new message, initializes the message with the payload
     * from a mavlink packet
     *
     */
    public msg_loweheiser_gov_efi(MAVLinkPacket mavLinkPacket) {
        this.msgid = MAVLINK_MSG_ID_LOWEHEISER_GOV_EFI;

        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.isMavlink2 = mavLinkPacket.isMavlink2;
        unpack(mavLinkPacket.payload);
    }

                                                  
    /**
     * Returns a string with the MSG name and data
     */
    @Override
    public String toString() {
        return "MAVLINK_MSG_ID_LOWEHEISER_GOV_EFI - sysid:"+sysid+" compid:"+compid+" volt_batt:"+volt_batt+" curr_batt:"+curr_batt+" curr_gen:"+curr_gen+" curr_rot:"+curr_rot+" fuel_level:"+fuel_level+" throttle:"+throttle+" runtime:"+runtime+" until_maintenance:"+until_maintenance+" rectifier_temp:"+rectifier_temp+" generator_temp:"+generator_temp+" efi_batt:"+efi_batt+" efi_rpm:"+efi_rpm+" efi_pw:"+efi_pw+" efi_fuel_flow:"+efi_fuel_flow+" efi_fuel_consumed:"+efi_fuel_consumed+" efi_baro:"+efi_baro+" efi_mat:"+efi_mat+" efi_clt:"+efi_clt+" efi_tps:"+efi_tps+" efi_exhaust_gas_temperature:"+efi_exhaust_gas_temperature+" generator_status:"+generator_status+" efi_status:"+efi_status+" efi_index:"+efi_index+"";
    }

    /**
     * Returns a human-readable string of the name of the message
     */
    @Override
    public String name() {
        return "MAVLINK_MSG_ID_LOWEHEISER_GOV_EFI";
    }
}
        