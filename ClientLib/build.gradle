apply plugin: 'com.android.library'
//apply plugin: 'com.getkeepsafe.dexcount'

ext {
    VERSION_MAJOR = 3
    VERSION_MINOR = 0
    VERSION_PATCH = 2
    VERSION_SUFFIX = "release"

    PUBLISH_ARTIFACT_ID = 'dronekit-android'
    PUBLISH_VERSION = generateVersionName("", VERSION_MAJOR, VERSION_MINOR, VERSION_PATCH, VERSION_SUFFIX)
    PUBLISH_VERSION_CODE = computeVersionCode(VERSION_MAJOR, VERSION_MINOR, VERSION_PATCH)
    PROJECT_DESCRIPTION = "Android DroneKit client library."
    /*PROJECT_LABELS = ['DroneCode', '3DR', 'Tower', 'DroneAPI', 'Android', 'DroneKit', '3DR Services']
    PROJECT_LICENSE = 'The Apache Software License, Version 2.0'
    PROJECT_LICENSE_URL = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    PROJECT_LICENSE_DISTRIBUTION = 'repo'
    */
}

//Log levels values
def logLevelVerbose = 2
def logLevelDebug = 3
def logLevelInfo = 4
def logLevelWarn = 5
def logLevelError = 6
def logLevelAssert = 7


def versionCode = 3

android {
    compileSdkVersion android_build_sdk_version
    buildToolsVersion android_build_tools_version

    dexOptions {
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        minSdkVersion android_build_min_sdk_version
        targetSdkVersion android_build_target_sdk_version


        //Build config fields
        buildConfigField "boolean", "SITL_DEBUG", "false"
        buildConfigField "String", "SOLO_LINK_IP", getSoloLinkIp()
        buildConfigField "boolean", "WRITE_LOG_FILE", "false"
        buildConfigField "int", "LOG_FILE_LEVEL", "$logLevelDebug"
        buildConfigField "int", "VERSION_CODE", "$versionCode"
    }

    sourceSets {
        main {
            aidl.srcDirs = ['src/main/java']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }


    testOptions {
        unitTests.returnDefaultValues = true
    }

    android.libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "Andruav_lib_release_" + defaultConfig.versionName + releaseTime() + ".aar"
        }
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "WRITE_LOG_FILE", "true"
        }

        sitl {
            buildConfigField "String", "SOLO_LINK_IP", getLocalIp()
            buildConfigField "boolean", "SITL_DEBUG", "true"
        }

        release {
        }
    }
    lint {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation 'com.jakewharton.timber:timber:3.1.0'
    implementation "com.google.android.gms:play-services-base:${play_services_version}"
    implementation "com.google.android.gms:play-services-location:${play_services_version}"
    implementation "com.google.android.gms:play-services-auth:${play_services_version}"

    //Java semver library
    implementation 'com.github.zafarkhaja:java-semver:0.9.0'
    implementation 'com.jcraft:jsch:0.1.51'
    //MP4 generation library
    implementation 'com.googlecode.mp4parser:isoparser:1.1.7'
    api project(':Mavlink')
    api files('libs/d2xx.jar')
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'org.robolectric:robolectric:3.0'
    // Jai USB serial - start
    implementation 'com.github.mik3y:usb-serial-for-android:3.7.0'
    // Jai USB serial - end
}

def getSoloLinkIp() {
    return '\"10.1.1.10\"'
}

def getLocalIp() {
    try {
        return '\"' + InetAddress.getLocalHost().getCanonicalHostName() + '\"'
    }catch(Exception e){
        return '\"\"'
    }
}

evaluationDependsOn ':Mavlink'
assemble.dependsOn ':Mavlink:jar'

//apply from: "$projectDir/maven-push.gradle"