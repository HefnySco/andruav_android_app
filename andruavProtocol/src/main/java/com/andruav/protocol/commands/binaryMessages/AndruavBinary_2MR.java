package com.andruav.protocol.commands.binaryMessages;

import com.andruav.AndruavSettings;
import com.andruav.protocol.commands.ProtocolHeaders;
import com.andruav.util.Ciphering;

import org.json.JSONObject;


/**
 * This is the base class of all andruav binary commands.
 * <br><br>* Created by M.Hefny on 15-Nov-14.
 */
public class AndruavBinary_2MR {

    /***
     * used internally by executor
     */
    public boolean processed = false;

    /**
     * if <b>true</b> then {@link #andruavResalaBinaryBase} text is encrypted.
     * <br>Encryption is simple XOR that is defined manually in all units that wants to encrypt communication.
     */
    public Boolean isEncrypted = false;
    /**
     * <b>true</b> means this instance received from another AndruavUnit not from Me.
     * <br><b>false</b> means this command is generated by Me and need to be sent to target or broadcasted.
     */
    public Boolean IsReceived = false;
    /**
     * if <b>true</b> then command contains error response.
     * <br>This does not means CRC error, but error response such as Login error due to bad login or accesscode.
     */
    public Boolean IsErr = false;
    public String MessageRouting;
    /**
     * if {@link #IsReceived} false then this is the UnitID name of the remote AndruavUnit.
     */
    public String partyID;

    public String groupName;
    /**
     * if {@link #IsReceived} true then this contains <b>myown UnitID</b>.
     * if {@link #IsReceived} false then this contains Unit--ID that I want to sendMessageToModule this command to.
     */
    public String targetName;
    /**
     * time set mainly before sending this command. used for commands such as <b>PING</b> system command.
     */
    public String timeStamp;
    /**
     * Holds binary commands.
     */
    public AndruavResalaBinaryBase andruavResalaBinaryBase;


    public AndruavBinary_2MR() {

    }

    public AndruavBinary_2MR(final boolean isReceived, final String messageCmdType, final String senderName, final String groupName) {
        super();
        IsReceived = isReceived;
        MessageRouting = messageCmdType;
        this.partyID = senderName;
        //this.groupName = groupName;
    }


    /***
     * takes the internal message "payload" and interpret it using {@link AndruavResalaBinaryBase} or on of its children
     *
     * @param messageBinary
     * @throws Exception
     */
    public void setMessageText(final byte[] messageBinary) throws Exception {

        if (andruavResalaBinaryBase == null) {
            //TODO: fix this
            andruavResalaBinaryBase = new AndruavResalaBinaryBase();
        }

        if (isEncrypted) {
            andruavResalaBinaryBase.setMessage(Ciphering.decrypt(AndruavSettings.encryptionkey, messageBinary));
        } else {
            andruavResalaBinaryBase.setMessage(messageBinary);
        }
    }


    /***
     * returns a complete Andruav_2MR external protocol "communication" as well as internal message command.
     *
     * @param addTime if <b>tyue</b> time field is initalized here
     * @return
     * @throws org.json.JSONException
     */
    public byte[] getJscon(final boolean addTime) throws Exception {
        JSONObject json_data = new JSONObject();
        json_data.put(ProtocolHeaders.MSG_ROUTING, MessageRouting);
        json_data.put(ProtocolHeaders.Sender, partyID);
        json_data.put(ProtocolHeaders.Group, groupName);
        json_data.put(ProtocolHeaders.MessageType, andruavResalaBinaryBase.messageTypeID);
        if (targetName != null) {
            json_data.put(ProtocolHeaders.Target, targetName);
        }
        if (isEncrypted) {
            json_data.put(ProtocolHeaders.Encryption, true);
        }
        if (addTime) {
            json_data.put(ProtocolHeaders.TimeStamp, System.currentTimeMillis());
        }

        // concatenate HeaderCommMessage + InternalMessage
        if (isEncrypted) {   // append encrypted msg part
            return AndruavBinaryHelper.joinBinarywithText(json_data.toString(), Ciphering.encrypt(AndruavSettings.encryptionkey, getJsonMessage()));
        } else {
            return AndruavBinaryHelper.joinBinarywithText(json_data.toString(), getJsonMessage());
        }


    }


    /***
     * Gets internal command message bytes[]
     *
     * @return array of bytes of {@link #andruavResalaBinaryBase#getJsonMessage()}
     * @throws org.json.JSONException
     */
    protected byte[] getJsonMessage() throws org.json.JSONException {
        return andruavResalaBinaryBase.getJsonMessage();
    }


}
